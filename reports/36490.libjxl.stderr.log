Accepting input from '/tmp/poc'
Usage for fuzzing: honggfuzz -P [flags] -- /out/djxl_fuzzer
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x72be0167af00 at pc 0x654b025d6480 bp 0x72be015fe4c0 sp 0x72be015fe4b8
WRITE of size 16 at 0x72be0167af00 thread T1
SCARINESS: 55 (multi-byte-write-heap-buffer-overflow-far-from-bounds)
    #0 0x654b025d647f in Store /src/libjxl/third_party/highway/hwy/ops/x86_128-inl.h:1721:3
    #1 0x654b025d647f in jxl::N_SSE4::SingleFromSingle(unsigned long, int const*, float, jxl::Image3<float>*, unsigned long, unsigned long, jxl::Rect&) /src/libjxl/lib/jxl/dec_modular.cc:85:5
    #2 0x654b024365a1 in jxl::ThreadPool::SequentialRunnerStatic(void*, void*, int (*)(void*, unsigned long), void (*)(void*, unsigned int, unsigned long), unsigned int, unsigned int) /src/libjxl/lib/jxl/base/data_parallel.cc:18:5
    #3 0x654b025dfe89 in Run<jxl::Status (unsigned long), (lambda at /src/libjxl/lib/jxl/dec_modular.cc:528:13)> /src/libjxl/lib/jxl/base/data_parallel.h:51:12
    #4 0x654b025dfe89 in Run<(lambda at /src/libjxl/lib/jxl/dec_modular.cc:528:13)> /src/libjxl/lib/jxl/base/data_parallel.h:60:12
    #5 0x654b025dfe89 in RunOnPool<jxl::ThreadPool::SkipInit, (lambda at /src/libjxl/lib/jxl/dec_modular.cc:528:13)> /src/libjxl/lib/jxl/base/data_parallel.h:115:24
    #6 0x654b025dfe89 in jxl::ModularFrameDecoder::ModularImageToDecodedRect(jxl::Image&, jxl::PassesDecoderState*, jxl::ThreadPool*, jxl::ImageBundle*, jxl::Rect) /src/libjxl/lib/jxl/dec_modular.cc:526:9
    #7 0x654b025de197 in jxl::ModularFrameDecoder::DecodeGroup(jxl::Rect const&, jxl::BitReader*, int, int, jxl::ModularStreamId const&, bool, jxl::PassesDecoderState*, jxl::ImageBundle*) /src/libjxl/lib/jxl/dec_modular.cc:309:7
    #8 0x654b02499fd0 in jxl::FrameDecoder::ProcessACGroup(unsigned long, jxl::BitReader* restrict*, unsigned long, unsigned long, bool, bool) /src/libjxl/lib/jxl/dec_frame.cc:578:7
    #9 0x654b024a9a8a in operator() /src/libjxl/lib/jxl/dec_frame.cc:731:16
    #10 0x654b024a9a8a in jxl::ThreadPool::RunCallState<jxl::FrameDecoder::ProcessSections(jxl::FrameDecoder::SectionInfo const*, unsigned long, jxl::FrameDecoder::SectionStatus*)::$_1, jxl::FrameDecoder::ProcessSections(jxl::FrameDecoder::SectionInfo const*, unsigned long, jxl::FrameDecoder::SectionStatus*)::$_2>::CallDataFunc(void*, unsigned int, unsigned long) /src/libjxl/lib/jxl/base/data_parallel.h:88:14
    #11 0x654b029a2979 in RunRange /src/libjxl/lib/threads/thread_parallel_runner_internal.cc:137:7
    #12 0x654b029a2979 in jpegxl::ThreadParallelRunner::ThreadFunc(jpegxl::ThreadParallelRunner*, int) /src/libjxl/lib/threads/thread_parallel_runner_internal.cc:167:9
    #13 0x654b029a4bc3 in __invoke<void (*)(jpegxl::ThreadParallelRunner *, int), jpegxl::ThreadParallelRunner *, unsigned int> /usr/local/bin/../include/c++/v1/type_traits:3679:1
    #14 0x654b029a4bc3 in __thread_execute<std::unique_ptr<std::__thread_struct>, void (*)(jpegxl::ThreadParallelRunner *, int), jpegxl::ThreadParallelRunner *, unsigned int, 2, 3> /usr/local/bin/../include/c++/v1/thread:280:5
    #15 0x654b029a4bc3 in void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(jpegxl::ThreadParallelRunner*, int), jpegxl::ThreadParallelRunner*, unsigned int> >(void*) /usr/local/bin/../include/c++/v1/thread:291:5
    #16 0x72be051de6b9 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x76b9)
    #17 0x72be048f251c in clone (/lib/x86_64-linux-gnu/libc.so.6+0x10751c)

DEDUP_TOKEN: Store--jxl::N_SSE4::SingleFromSingle(unsigned long, int const*, float, jxl::Image3<float>*, unsigned long, unsigned long, jxl::Rect&)--jxl::ThreadPool::SequentialRunnerStatic(void*, void*, int (*)(void*, unsigned long), void (*)(void*, unsigned int, unsigned long), unsigned int, unsigned int)
0x72be0167af00 is located 1024 bytes to the right of 205568-byte region [0x72be01648800,0x72be0167ab00)
allocated by thread T0 here:
    #0 0x654b022d319d in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:145:3
    #1 0x654b02436150 in jxl::CacheAligned::Allocate(unsigned long, unsigned long) /src/libjxl/lib/jxl/base/cache_aligned.cc:85:21
    #2 0x654b023738dc in Allocate /src/libjxl/lib/jxl/base/cache_aligned.h:43:12
    #3 0x654b023738dc in AllocateArray /src/libjxl/lib/jxl/base/cache_aligned.h:61:29
    #4 0x654b023738dc in jxl::PlaneBase::PlaneBase(unsigned long, unsigned long, unsigned long) /src/libjxl/lib/jxl/image.cc:93:14
    #5 0x654b0249c63c in Plane /src/libjxl/lib/jxl/image.h:147:9
    #6 0x654b0249c63c in Image3 /src/libjxl/lib/jxl/image.h:328:17
    #7 0x654b0249c63c in jxl::PassesDecoderState::InitForAC(jxl::ThreadPool*) /src/libjxl/lib/jxl/dec_cache.h:331:17
    #8 0x654b024904b9 in jxl::FrameDecoder::ProcessSections(jxl::FrameDecoder::SectionInfo const*, unsigned long, jxl::FrameDecoder::SectionStatus*) /src/libjxl/lib/jxl/dec_frame.cc:692:17
    #9 0x654b0248a655 in jxl::DecodeFrame(jxl::DecompressParams const&, jxl::PassesDecoderState*, jxl::ThreadPool*, jxl::BitReader*, jxl::ImageBundle*, jxl::CodecMetadata const&, jxl::SizeConstraints const*, bool) /src/libjxl/lib/jxl/dec_frame.cc:208:5
    #10 0x654b0232f025 in jxl::(anonymous namespace)::JxlDecoderProcessInternal(JxlDecoderStruct*, unsigned char const*, unsigned long) /src/libjxl/lib/jxl/decode.cc:1088:12
    #11 0x654b0232503e in JxlDecoderProcessInput /src/libjxl/lib/jxl/decode.cc:1756:14
    #12 0x654b02308237 in DecodeJpegXl /src/libjxl/tools/djxl_fuzzer.cc:168:31
    #13 0x654b02308237 in TestOneInput /src/libjxl/tools/djxl_fuzzer.cc:497:3
    #14 0x654b02308237 in LLVMFuzzerTestOneInput /src/libjxl/tools/djxl_fuzzer.cc:507:10
    #15 0x654b0231477b in main (/out/djxl_fuzzer+0x11477b)

DEDUP_TOKEN: malloc--jxl::CacheAligned::Allocate(unsigned long, unsigned long)--Allocate
Thread T1 created by T0 here:
    #0 0x654b022bd4ea in pthread_create /src/llvm-project/compiler-rt/lib/asan/asan_interceptors.cpp:214:3
    #1 0x654b029a42c6 in __libcpp_thread_create /usr/local/bin/../include/c++/v1/__threading_support:509:10
    #2 0x654b029a42c6 in thread<void (&)(jpegxl::ThreadParallelRunner *, int), jpegxl::ThreadParallelRunner *, unsigned int &, void> /usr/local/bin/../include/c++/v1/thread:307:16
    #3 0x654b029a42c6 in construct<std::thread, void (&)(jpegxl::ThreadParallelRunner *, int), jpegxl::ThreadParallelRunner *, unsigned int &> /usr/local/bin/../include/c++/v1/memory:886:28
    #4 0x654b029a42c6 in construct<std::thread, void (&)(jpegxl::ThreadParallelRunner *, int), jpegxl::ThreadParallelRunner *, unsigned int &, void> /usr/local/bin/../include/c++/v1/__memory/allocator_traits.h:288:13
    #5 0x654b029a42c6 in void std::__1::vector<std::__1::thread, std::__1::allocator<std::__1::thread> >::__construct_one_at_end<void (&)(jpegxl::ThreadParallelRunner*, int), jpegxl::ThreadParallelRunner*, unsigned int&>(void (&)(jpegxl::ThreadParallelRunner*, int), jpegxl::ThreadParallelRunner*&&, unsigned int&) /usr/local/bin/../include/c++/v1/vector:926:5
    #6 0x654b029a3065 in emplace_back<void (&)(jpegxl::ThreadParallelRunner *, int), jpegxl::ThreadParallelRunner *, unsigned int &> /usr/local/bin/../include/c++/v1/vector:1684:9
    #7 0x654b029a3065 in jpegxl::ThreadParallelRunner::ThreadParallelRunner(int) /src/libjxl/lib/threads/thread_parallel_runner_internal.cc:194:14
    #8 0x654b029a17ea in JxlThreadParallelRunnerCreate /src/libjxl/lib/threads/thread_parallel_runner.cc:81:19
    #9 0x654b023078cc in JxlThreadParallelRunnerMake /src/libjxl/lib/include/jxl/thread_parallel_runner_cxx.h:56:7
    #10 0x654b023078cc in DecodeJpegXl /src/libjxl/tools/djxl_fuzzer.cc:78:17
    #11 0x654b023078cc in TestOneInput /src/libjxl/tools/djxl_fuzzer.cc:497:3
    #12 0x654b023078cc in LLVMFuzzerTestOneInput /src/libjxl/tools/djxl_fuzzer.cc:507:10
    #13 0x654b0231477b in main (/out/djxl_fuzzer+0x11477b)

DEDUP_TOKEN: pthread_create--__libcpp_thread_create--thread<void (&)(jpegxl::ThreadParallelRunner *, int), jpegxl::ThreadParallelRunner *, unsigned int &, void>
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libjxl/third_party/highway/hwy/ops/x86_128-inl.h:1721:3 in Store
Shadow bytes around the buggy address:
  0x0e58402c7590: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0e58402c75a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0e58402c75b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0e58402c75c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0e58402c75d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
=>0x0e58402c75e0:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0e58402c75f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0e58402c7600: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0e58402c7610: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0e58402c7620: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0e58402c7630: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING