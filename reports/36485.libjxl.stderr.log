INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 3282985351
INFO: Loaded 1 modules   (32380 inline 8-bit counters): 32380 [0x55f10007bd88, 0x55f100083c04),
INFO: Loaded 1 PC tables (32380 PCs): 32380 [0x55f100083c08,0x55f1001023c8),
/out/djxl_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: container-overflow on address 0x618000000740 at pc 0x55f0ff9fef0d bp 0x7ffeed1b3f90 sp 0x7ffeed1b3f88
READ of size 8 at 0x618000000740 thread T0
SCARINESS: 23 (8-byte-read-container-overflow)
    #0 0x55f0ff9fef0c in jxl::InvSqueeze(jxl::Image&, std::__1::vector<jxl::SqueezeParams, std::__1::allocator<jxl::SqueezeParams> >, jxl::ThreadPool*) /src/libjxl/lib/jxl/modular/transform/squeeze.cc:300:51
    #1 0x55f0ff74bd9e in jxl::Transform::Inverse(jxl::Image&, jxl::weighted::Header const&, jxl::ThreadPool*) /src/libjxl/lib/jxl/modular/transform/transform.cc:30:14
    #2 0x55f0ff7463f6 in jxl::Image::undo_transforms(jxl::weighted::Header const&, int, jxl::ThreadPool*) /src/libjxl/lib/jxl/modular/modular_image.cc:20:23
    #3 0x55f0ff91ee75 in jxl::ModularFrameDecoder::FinalizeDecoding(jxl::PassesDecoderState*, jxl::ThreadPool*, jxl::ImageBundle*) /src/libjxl/lib/jxl/dec_modular.cc:591:6
    #4 0x55f0ff7da2a5 in jxl::FrameDecoder::Flush() /src/libjxl/lib/jxl/dec_frame.cc:814:3
    #5 0x55f0ff7cebb8 in jxl::FrameDecoder::FinalizeFrame() /src/libjxl/lib/jxl/dec_frame.cc:912:3
    #6 0x55f0ff7c83a8 in jxl::DecodeFrame(jxl::DecompressParams const&, jxl::PassesDecoderState*, jxl::ThreadPool*, jxl::BitReader*, jxl::ImageBundle*, jxl::CodecMetadata const&, jxl::SizeConstraints const*, bool) /src/libjxl/lib/jxl/dec_frame.cc:230:3
    #7 0x55f0ff676c9a in jxl::(anonymous namespace)::JxlDecoderProcessInternal(JxlDecoderStruct*, unsigned char const*, unsigned long) /src/libjxl/lib/jxl/decode.cc:1088:12
    #8 0x55f0ff66ce54 in JxlDecoderProcessInput /src/libjxl/lib/jxl/decode.cc:1756:14
    #9 0x55f0ff65b44e in DecodeJpegXl /src/libjxl/tools/djxl_fuzzer.cc:168:31
    #10 0x55f0ff65b44e in TestOneInput /src/libjxl/tools/djxl_fuzzer.cc:497:3
    #11 0x55f0ff65b44e in LLVMFuzzerTestOneInput /src/libjxl/tools/djxl_fuzzer.cc:507:10
    #12 0x55f0ff55d1b3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:599:15
    #13 0x55f0ff5488f2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:323:6
    #14 0x55f0ff54e5ce in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:856:9
    #15 0x55f0ff5780b2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #16 0x73669f89f83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #17 0x55f0ff523998 in _start (/out/djxl_fuzzer+0x123998)

DEDUP_TOKEN: jxl::InvSqueeze(jxl::Image&, std::__1::vector<jxl::SqueezeParams, std::__1::allocator<jxl::SqueezeParams> >, jxl::ThreadPool*)--jxl::Transform::Inverse(jxl::Image&, jxl::weighted::Header const&, jxl::ThreadPool*)--jxl::Image::undo_transforms(jxl::weighted::Header const&, int, jxl::ThreadPool*)
0x618000000740 is located 704 bytes inside of 896-byte region [0x618000000480,0x618000000800)
allocated by thread T0 here:
    #0 0x55f0ff65752d in operator new(unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:99:3
    #1 0x55f0ff74f23e in __libcpp_operator_new<unsigned long> /usr/local/bin/../include/c++/v1/new:235:10
    #2 0x55f0ff74f23e in __libcpp_allocate /usr/local/bin/../include/c++/v1/new:261:10
    #3 0x55f0ff74f23e in allocate /usr/local/bin/../include/c++/v1/memory:840:38
    #4 0x55f0ff74f23e in allocate /usr/local/bin/../include/c++/v1/__memory/allocator_traits.h:260:20
    #5 0x55f0ff74f23e in __split_buffer /usr/local/bin/../include/c++/v1/__split_buffer:314:29
    #6 0x55f0ff74f23e in std::__1::vector<jxl::Channel, std::__1::allocator<jxl::Channel> >::insert(std::__1::__wrap_iter<jxl::Channel const*>, jxl::Channel&&) /usr/local/bin/../include/c++/v1/vector:1827:53
    #7 0x55f0ff9fe535 in jxl::MetaSqueeze(jxl::Image&, std::__1::vector<jxl::SqueezeParams, std::__1::allocator<jxl::SqueezeParams> >*) /src/libjxl/lib/jxl/modular/transform/squeeze.cc:272:21
    #8 0x55f0ff74e0fb in jxl::Transform::MetaApply(jxl::Image&) /src/libjxl/lib/jxl/modular/transform/transform.cc:64:14
    #9 0x55f0ff73975b in jxl::ModularDecode(jxl::BitReader*, jxl::Image&, jxl::GroupHeader&, unsigned long, jxl::ModularOptions*, std::__1::vector<jxl::PropertyDecisionNode, std::__1::allocator<jxl::PropertyDecisionNode> > const*, jxl::ANSCode const*, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > const*, bool) /src/libjxl/lib/jxl/modular/encoding/encoding.cc:394:5
    #10 0x55f0ff73b246 in jxl::ModularGenericDecompress(jxl::BitReader*, jxl::Image&, jxl::GroupHeader*, unsigned long, jxl::ModularOptions*, int, std::__1::vector<jxl::PropertyDecisionNode, std::__1::allocator<jxl::PropertyDecisionNode> > const*, jxl::ANSCode const*, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > const*, bool) /src/libjxl/lib/jxl/modular/encoding/encoding.cc:505:21
    #11 0x55f0ff91276a in jxl::ModularFrameDecoder::DecodeGlobalInfo(jxl::BitReader*, jxl::FrameHeader const&, bool) /src/libjxl/lib/jxl/dec_modular.cc:209:23
    #12 0x55f0ff7d1ba6 in jxl::FrameDecoder::ProcessDCGlobal(jxl::BitReader*) /src/libjxl/lib/jxl/dec_frame.cc:374:46
    #13 0x55f0ff7cc6c1 in jxl::FrameDecoder::ProcessSections(jxl::FrameDecoder::SectionInfo const*, unsigned long, jxl::FrameDecoder::SectionStatus*) /src/libjxl/lib/jxl/dec_frame.cc:656:31
    #14 0x55f0ff7c7d42 in jxl::DecodeFrame(jxl::DecompressParams const&, jxl::PassesDecoderState*, jxl::ThreadPool*, jxl::BitReader*, jxl::ImageBundle*, jxl::CodecMetadata const&, jxl::SizeConstraints const*, bool) /src/libjxl/lib/jxl/dec_frame.cc:208:5
    #15 0x55f0ff676c9a in jxl::(anonymous namespace)::JxlDecoderProcessInternal(JxlDecoderStruct*, unsigned char const*, unsigned long) /src/libjxl/lib/jxl/decode.cc:1088:12
    #16 0x55f0ff66ce54 in JxlDecoderProcessInput /src/libjxl/lib/jxl/decode.cc:1756:14
    #17 0x55f0ff65b44e in DecodeJpegXl /src/libjxl/tools/djxl_fuzzer.cc:168:31
    #18 0x55f0ff65b44e in TestOneInput /src/libjxl/tools/djxl_fuzzer.cc:497:3
    #19 0x55f0ff65b44e in LLVMFuzzerTestOneInput /src/libjxl/tools/djxl_fuzzer.cc:507:10
    #20 0x55f0ff55d1b3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:599:15
    #21 0x55f0ff5488f2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:323:6
    #22 0x55f0ff54e5ce in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:856:9
    #23 0x55f0ff5780b2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #24 0x73669f89f83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: operator new(unsigned long)--__libcpp_operator_new<unsigned long>--__libcpp_allocate
HINT: if you don't care about these errors you may set ASAN_OPTIONS=detect_container_overflow=0.
If you suspect a false positive see also: https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow.
SUMMARY: AddressSanitizer: container-overflow /src/libjxl/lib/jxl/modular/transform/squeeze.cc:300:51 in jxl::InvSqueeze(jxl::Image&, std::__1::vector<jxl::SqueezeParams, std::__1::allocator<jxl::SqueezeParams> >, jxl::ThreadPool*)
Shadow bytes around the buggy address:
  0x0c307fff8090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c307fff80a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c307fff80b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c307fff80c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c307fff80d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c307fff80e0: 00 00 00 00 fc fc fc fc[fc]fc fc fc fc fc fc fc
  0x0c307fff80f0: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
  0x0c307fff8100: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c307fff8110: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c307fff8120: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c307fff8130: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING