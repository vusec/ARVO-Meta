======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/coder_MVG_fuzzer < INPUT_FILE
or
  /out/coder_MVG_fuzzer INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/coder_MVG_fuzzer [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
execvp failed, errno = 2 (No such file or directory)
Magick: "gs" "-q" "-dBATCH" "-dSAFER" "-dMaxBitmap=50000000" "-dNOPAUSE" "-sDEVICE=ppmraw" "-dTextAlphaBits=4" "-dGraphicsAlphaBits=4" "-r72x72" "-g24744x24" "-sOutputFile=/tmp/gm9iwPKm" "--" "/tmp/gmUvgmUY" "-c" "quit".
execvp failed, errno = 2 (No such file or directory)
Magick: "gs" "-q" "-dBATCH" "-dSAFER" "-dMaxBitmap=50000000" "-dNOPAUSE" "-sDEVICE=ppmraw" "-dTextAlphaBits=4" "-dGraphicsAlphaBits=4" "-r72x72" "-g24744x24" "-sOutputFile=/tmp/gm9iwPKm" "--" "/tmp/gmUvgmUY" "-c" "quit".
Magick: Postscript delegate failed (/tmp/gm5STaIs).
=================================================================
==13==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x77783b2c3915 at pc 0x00000071d439 bp 0x7fff516c6570 sp 0x7fff516c6568
WRITE of size 1 at 0x77783b2c3915 thread T0
SCARINESS: 46 (1-byte-write-stack-buffer-overflow)
    #0 0x71d438 in TranslateTextEx /src/graphicsmagick/magick/utility.c:6317:15
    #1 0x56e8a3 in AnnotateImage /src/graphicsmagick/magick/annotate.c:219:8
    #2 0x6d2823 in DrawPrimitive /src/graphicsmagick/magick/render.c:5471:15
    #3 0x6c45dc in DrawImage /src/graphicsmagick/magick/render.c:4373:13
    #4 0x7fcfc2 in ReadMVGImage /src/graphicsmagick/coders/mvg.c:224:10
    #5 0x5ca17d in ReadImage /src/graphicsmagick/magick/constitute.c:1607:13
    #6 0x583445 in BlobToImage /src/graphicsmagick/magick/blob.c:764:13
    #7 0x5371de in Magick::Image::read(Magick::Blob const&) /src/graphicsmagick/Magick++/lib/Image.cpp:1591:5
    #8 0x52ea83 in LLVMFuzzerTestOneInput /src/graphicsmagick/fuzzing/coder_fuzzer.cc:20:15
    #9 0x52f3bf in ExecuteFilesOnyByOne(int, char**) /src/libfuzzer/afl/afl_driver.cpp:301:5
    #10 0x52f96e in main /src/libfuzzer/afl/afl_driver.cpp:339:12
    #11 0x77783a21483f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #12 0x41ddc8 in _start (/out/coder_MVG_fuzzer+0x41ddc8)

DEDUP_TOKEN: TranslateTextEx--AnnotateImage--DrawPrimitive
Address 0x77783b2c3915 is located in stack of thread T0 at offset 4373 in frame
    #0 0x71b66f in TranslateTextEx /src/graphicsmagick/magick/utility.c:5877

DEDUP_TOKEN: TranslateTextEx
  This frame has 4 object(s):
    [32, 2085) 'buffer' (line 5878)
    [2224, 2232) 'length' (line 5893)
    [2256, 2288) 'bounds' (line 6296)
    [2320, 4373) 'key' (line 6306) <== Memory access at offset 4373 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /src/graphicsmagick/magick/utility.c:6317:15 in TranslateTextEx
Shadow bytes around the buggy address:
  0x0eef876506d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0eef876506e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0eef876506f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0eef87650700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0eef87650710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0eef87650720: 00 00[05]f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
  0x0eef87650730: f3 f3 f3 f3 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0eef87650740: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0eef87650750: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0eef87650760: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0eef87650770: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING