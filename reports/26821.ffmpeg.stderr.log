======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/ffmpeg_AV_CODEC_ID_ADPCM_SWF_fuzzer < INPUT_FILE
or
  /out/ffmpeg_AV_CODEC_ID_ADPCM_SWF_fuzzer INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/ffmpeg_AV_CODEC_ID_ADPCM_SWF_fuzzer [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x61f000000c00 at pc 0x0000004e2a37 bp 0x7ffc818bcaf0 sp 0x7ffc818bcae8
WRITE of size 2 at 0x61f000000c00 thread T0
SCARINESS: 33 (2-byte-write-heap-buffer-overflow)
    #0 0x4e2a36 in adpcm_swf_decode /src/ffmpeg/libavcodec/adpcm.c:689:28
    #1 0x4d9da0 in adpcm_decode_frame /src/ffmpeg/libavcodec/adpcm.c:1778:13
    #2 0x4f4fc1 in decode_simple_internal /src/ffmpeg/libavcodec/decode.c:352:15
    #3 0x4f4bf5 in decode_simple_receive_frame /src/ffmpeg/libavcodec/decode.c:556:15
    #4 0x4eabf1 in decode_receive_frame_internal /src/ffmpeg/libavcodec/decode.c:576:15
    #5 0x4eaa05 in avcodec_send_packet /src/ffmpeg/libavcodec/decode.c:634:15
    #6 0x4ebdaf in compat_decode /src/ffmpeg/libavcodec/decode.c:769:15
    #7 0x4ec451 in avcodec_decode_audio4 /src/ffmpeg/libavcodec/decode.c:838:12
    #8 0x4cf69e in LLVMFuzzerTestOneInput /src/ffmpeg/tools/target_dec_fuzzer.c:338:23
    #9 0x99392e in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:217:5
    #10 0x99392e in main /src/libfuzzer/afl/afl_driver.cpp:254:12
    #11 0x76178c95e83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #12 0x41ee58 in _start (/out/ffmpeg_AV_CODEC_ID_ADPCM_SWF_fuzzer+0x41ee58)

DEDUP_TOKEN: adpcm_swf_decode--adpcm_decode_frame--decode_simple_internal
0x61f000000c00 is located 0 bytes to the right of 2944-byte region [0x61f000000080,0x61f000000c00)
allocated by thread T0 here:
    #0 0x49bea7 in posix_memalign /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:226:3
    #1 0x935234 in av_malloc /src/ffmpeg/libavutil/mem.c:86:9
    #2 0x91314b in av_buffer_alloc /src/ffmpeg/libavutil/buffer.c:72:12
    #3 0x914c0c in pool_alloc_buffer /src/ffmpeg/libavutil/buffer.c:343:26
    #4 0x9148d1 in av_buffer_pool_get /src/ffmpeg/libavutil/buffer.c:379:15
    #5 0x4f1d97 in audio_get_buffer /src/ffmpeg/libavcodec/decode.c:1600:25
    #6 0x4f0401 in avcodec_default_get_buffer2 /src/ffmpeg/libavcodec/decode.c:1686:16
    #7 0x4f3b0e in ff_get_buffer /src/ffmpeg/libavcodec/decode.c:1923:11
    #8 0x4d1ecf in adpcm_decode_frame /src/ffmpeg/libavcodec/adpcm.c:965:16
    #9 0x4f4fc1 in decode_simple_internal /src/ffmpeg/libavcodec/decode.c:352:15
    #10 0x4f4bf5 in decode_simple_receive_frame /src/ffmpeg/libavcodec/decode.c:556:15
    #11 0x4eabf1 in decode_receive_frame_internal /src/ffmpeg/libavcodec/decode.c:576:15
    #12 0x4eaa05 in avcodec_send_packet /src/ffmpeg/libavcodec/decode.c:634:15
    #13 0x4ebdaf in compat_decode /src/ffmpeg/libavcodec/decode.c:769:15
    #14 0x4ec451 in avcodec_decode_audio4 /src/ffmpeg/libavcodec/decode.c:838:12
    #15 0x4cf69e in LLVMFuzzerTestOneInput /src/ffmpeg/tools/target_dec_fuzzer.c:338:23
    #16 0x99392e in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:217:5
    #17 0x99392e in main /src/libfuzzer/afl/afl_driver.cpp:254:12
    #18 0x76178c95e83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: posix_memalign--av_malloc--av_buffer_alloc
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/ffmpeg/libavcodec/adpcm.c:689:28 in adpcm_swf_decode
Shadow bytes around the buggy address:
  0x0c3e7fff8130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c3e7fff8140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c3e7fff8150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c3e7fff8160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c3e7fff8170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c3e7fff8180:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c3e7fff8190: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c3e7fff81a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c3e7fff81b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c3e7fff81c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c3e7fff81d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING