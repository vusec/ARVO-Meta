INFO: Seed: 127747307
INFO: Loaded 1 modules   (46461 inline 8-bit counters): 46461 [0xde78c0, 0xdf2e3d),
INFO: Loaded 1 PC tables (46461 PCs): 46461 [0xade7a8,0xb93f78),
/out/decompress_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6040000000f8 at pc 0x00000056c880 bp 0x7ffc20775850 sp 0x7ffc20775848
READ of size 1 at 0x6040000000f8 thread T0
SCARINESS: 12 (1-byte-read-heap-buffer-overflow)
    #0 0x56c87f in tinfl_decompress /src/c-blosc2/internal-complibs/miniz-2.0.8/miniz.c:2374:9
    #1 0x56a5dd in mz_inflate /src/c-blosc2/internal-complibs/miniz-2.0.8/miniz.c:434:18
    #2 0x571c95 in mz_uncompress /src/c-blosc2/internal-complibs/miniz-2.0.8/miniz.c:543:14
    #3 0x5b8c2b in zlib_wrap_decompress /src/c-blosc2/blosc/blosc2.c:459:12
    #4 0x5b8c2b in blosc_d /src/c-blosc2/blosc/blosc2.c:1066:18
    #5 0x5af454 in serial_blosc /src/c-blosc2/blosc/blosc2.c:1169:18
    #6 0x5af454 in do_job /src/c-blosc2/blosc/blosc2.c:1328:15
    #7 0x5b570c in blosc_run_decompression_with_context /src/c-blosc2/blosc/blosc2.c:2116:15
    #8 0x5b6217 in blosc_decompress /src/c-blosc2/blosc/blosc2.c:2185:12
    #9 0x560544 in LLVMFuzzerTestOneInput /src/c-blosc2/tests/fuzz/fuzz_decompress.c:33:5
    #10 0x465731 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:559:15
    #11 0x450ed2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:301:6
    #12 0x456e6d in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:801:9
    #13 0x47e752 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #14 0x78869554c83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #15 0x42b678 in _start (/out/decompress_fuzzer+0x42b678)

DEDUP_TOKEN: tinfl_decompress--mz_inflate--mz_uncompress
0x6040000000f8 is located 0 bytes to the right of 40-byte region [0x6040000000d0,0x6040000000f8)
allocated by thread T0 here:
    #0 0x52db3d in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:145:3
    #1 0x43f537 in operator new(unsigned long) (/out/decompress_fuzzer+0x43f537)
    #2 0x450ed2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:301:6
    #3 0x456e6d in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:801:9
    #4 0x47e752 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #5 0x78869554c83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: malloc--operator new(unsigned long)--fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long)
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/c-blosc2/internal-complibs/miniz-2.0.8/miniz.c:2374:9 in tinfl_decompress
Shadow bytes around the buggy address:
  0x0c087fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c087fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c087fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c087fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c087fff8000: fa fa 00 00 00 00 00 00 fa fa 00 00 00 00 00 00
=>0x0c087fff8010: fa fa 00 00 00 00 00 fa fa fa 00 00 00 00 00[fa]
  0x0c087fff8020: fa fa 00 00 00 00 00 fa fa fa fa fa fa fa fa fa
  0x0c087fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c087fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c087fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c087fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING