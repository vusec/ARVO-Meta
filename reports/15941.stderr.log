======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/compress_fuzzer < INPUT_FILE
or
  /out/compress_fuzzer INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/compress_fuzzer [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
=================================================================
==7==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x61c00000075b at pc 0x0000004f0b5e bp 0x7fffdf158c60 sp 0x7fffdf158c58
WRITE of size 4 at 0x61c00000075b thread T0
SCARINESS: 36 (4-byte-write-heap-buffer-overflow)
    #0 0x4f0b5d in LZ4_write32 /src/lz4/lib/lz4.c:250:76
    #1 0x4ca86c in LZ4_compress_generic /src/lz4/lib/lz4.c:1033:21
    #2 0x4ca86c in LZ4_compress_fast_extState /src/lz4/lib/lz4.c:1161
    #3 0x4d327f in LZ4_compress_fast /src/lz4/lib/lz4.c:1222:14
    #4 0x4c9963 in LLVMFuzzerTestOneInput /src/lz4/ossfuzz/compress_fuzzer.c:27:29
    #5 0x4c7eea in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:216:5
    #6 0x4c7eea in main /src/libfuzzer/afl/afl_driver.cpp:253
    #7 0x7febdc4a283f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #8 0x41daa8 in _start (/out/compress_fuzzer+0x41daa8)

DEDUP_TOKEN: LZ4_write32--LZ4_compress_generic--LZ4_compress_fast_extState
0x61c00000075b is located 1 bytes to the right of 1754-byte region [0x61c000000080,0x61c00000075a)
allocated by thread T0 here:
    #0 0x495a0d in malloc /src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:145:3
    #1 0x4c991d in LLVMFuzzerTestOneInput /src/lz4/ossfuzz/compress_fuzzer.c:19:30
    #2 0x4c7eea in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:216:5
    #3 0x4c7eea in main /src/libfuzzer/afl/afl_driver.cpp:253
    #4 0x7febdc4a283f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: malloc--LLVMFuzzerTestOneInput--ExecuteFilesOnyByOne
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/lz4/lib/lz4.c:250:76 in LZ4_write32
Shadow bytes around the buggy address:
  0x0c387fff8090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c387fff80a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c387fff80b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c387fff80c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c387fff80d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c387fff80e0: 00 00 00 00 00 00 00 00 00 00 00[02]fa fa fa fa
  0x0c387fff80f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c387fff8100: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c387fff8110: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c387fff8120: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c387fff8130: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==7==ABORTING
