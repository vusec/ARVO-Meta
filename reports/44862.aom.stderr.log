Accepting input from '/tmp/poc'
Usage for fuzzing: honggfuzz -P [flags] -- /out/av1_dec_fuzzer
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x615000000554 at pc 0x000000522d9f bp 0x7fff4b8195e0 sp 0x7fff4b8195d8
WRITE of size 4 at 0x615000000554 thread T0
SCARINESS: 46 (4-byte-write-heap-buffer-overflow-far-from-bounds)
    #0 0x522d9e in sync_write /src/aom/av1/decoder/decodeframe.c:2567:36
    #1 0x522d9e in signal_decoding_done_for_erroneous_row /src/aom/av1/decoder/decodeframe.c:2591:3
    #2 0x522d9e in row_mt_worker_hook /src/aom/av1/decoder/decodeframe.c:3174:5
    #3 0x7eefbe in execute /src/aom/aom_util/aom_thread.c:163:27
    #4 0x514ff5 in launch_dec_workers /src/aom/av1/decoder/decodeframe.c
    #5 0x514ff5 in decode_tiles_row_mt /src/aom/av1/decoder/decodeframe.c:3808:3
    #6 0x514ff5 in av1_decode_tg_tiles_and_wrapup /src/aom/av1/decoder/decodeframe.c:5233:9
    #7 0x59321d in read_one_tile_group_obu /src/aom/av1/decoder/obu.c:361:3
    #8 0x59321d in aom_decode_frame_from_obus /src/aom/av1/decoder/obu.c:1025:33
    #9 0x56c031 in av1_receive_compressed_data /src/aom/av1/decoder/decoder.c:474:7
    #10 0x4f61f4 in frame_worker_hook /src/aom/av1/av1_dx_iface.c:412:16
    #11 0x7eefbe in execute /src/aom/aom_util/aom_thread.c:163:27
    #12 0x4e3e58 in decode_one /src/aom/av1/av1_dx_iface.c:529:3
    #13 0x4e3e58 in decoder_decode /src/aom/av1/av1_dx_iface.c:716:11
    #14 0x4e28fe in aom_codec_decode /src/aom/aom/src/aom_decoder.c:103:11
    #15 0x4e0fe6 in LLVMFuzzerTestOneInput /src/aom/examples/av1_dec_fuzzer.cc:56:9
    #16 0x4d6f8b in main (/out/av1_dec_fuzzer+0x4d6f8b)
    #17 0x71fc55b8f082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)
    #18 0x41d55d in _start (/out/av1_dec_fuzzer+0x41d55d)

DEDUP_TOKEN: sync_write--signal_decoding_done_for_erroneous_row--row_mt_worker_hook
0x615000000554 is located 44 bytes to the left of 459-byte region [0x615000000580,0x61500000074b)
allocated by thread T0 here:
    #0 0x49d85d in __interceptor_malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:129:3
    #1 0x7ed644 in aom_memalign /src/aom/aom_mem/aom_mem.c:59:22
    #2 0x7ed644 in aom_malloc /src/aom/aom_mem/aom_mem.c:67:40
    #3 0x513db6 in dec_row_mt_alloc /src/aom/av1/decoder/decodeframe.c:2496:3
    #4 0x513db6 in decode_tiles_row_mt /src/aom/av1/decoder/decodeframe.c:3794:7
    #5 0x513db6 in av1_decode_tg_tiles_and_wrapup /src/aom/av1/decoder/decodeframe.c:5233:9
    #6 0x59321d in read_one_tile_group_obu /src/aom/av1/decoder/obu.c:361:3
    #7 0x59321d in aom_decode_frame_from_obus /src/aom/av1/decoder/obu.c:1025:33
    #8 0x56c031 in av1_receive_compressed_data /src/aom/av1/decoder/decoder.c:474:7
    #9 0x4f61f4 in frame_worker_hook /src/aom/av1/av1_dx_iface.c:412:16
    #10 0x7eefbe in execute /src/aom/aom_util/aom_thread.c:163:27
    #11 0x4e3e58 in decode_one /src/aom/av1/av1_dx_iface.c:529:3
    #12 0x4e3e58 in decoder_decode /src/aom/av1/av1_dx_iface.c:716:11
    #13 0x4e28fe in aom_codec_decode /src/aom/aom/src/aom_decoder.c:103:11
    #14 0x4e0fe6 in LLVMFuzzerTestOneInput /src/aom/examples/av1_dec_fuzzer.cc:56:9
    #15 0x4d6f8b in main (/out/av1_dec_fuzzer+0x4d6f8b)

DEDUP_TOKEN: __interceptor_malloc--aom_memalign--aom_malloc
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/aom/av1/decoder/decodeframe.c:2567:36 in sync_write
Shadow bytes around the buggy address:
  0x0c2a7fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c2a7fff8060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c2a7fff8070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c2a7fff8080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c2a7fff8090: 00 00 00 00 00 00 00 00 00 03 fa fa fa fa fa fa
=>0x0c2a7fff80a0: fa fa fa fa fa fa fa fa fa fa[fa]fa fa fa fa fa
  0x0c2a7fff80b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c2a7fff80c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c2a7fff80d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c2a7fff80e0: 00 00 00 00 00 00 00 00 00 03 fa fa fa fa fa fa
  0x0c2a7fff80f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING