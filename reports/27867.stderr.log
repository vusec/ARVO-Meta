INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 1962956395
INFO: Loaded 1 modules   (150063 inline 8-bit counters): 150063 [0x1a78c00, 0x1a9d62f), 
INFO: Loaded 1 PC tables (150063 PCs): 150063 [0x1a9d630,0x1ce7920), 
/out/coder_JPG_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==7==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6120000007d8 at pc 0x000000dfc2e5 bp 0x7ffdca252540 sp 0x7ffdca252538
READ of size 2 at 0x6120000007d8 thread T0
SCARINESS: 24 (2-byte-read-heap-buffer-overflow-far-from-bounds)
    #0 0xdfc2e4 in decompress_smooth_data /src/libjpeg-turbo/jdcoefct.c:594:23
    #1 0xe25b4a in process_data_simple_main /src/libjpeg-turbo/jdmainct.c:300:10
    #2 0xd1fb0f in jpeg_read_scanlines /src/libjpeg-turbo/jdapistd.c:287:3
    #3 0x95e592 in ReadJPEGImage /src/graphicsmagick/coders/jpeg.c:1603:12
    #4 0x601983 in ReadImage /src/graphicsmagick/magick/constitute.c:1630:13
    #5 0x5b65d8 in BlobToImage /src/graphicsmagick/magick/blob.c:764:13
    #6 0x55d57f in Magick::Image::read(Magick::Blob const&) /src/graphicsmagick/Magick++/lib/Image.cpp:1591:5
    #7 0x556037 in LLVMFuzzerTestOneInput /src/graphicsmagick/fuzzing/coder_fuzzer.cc:22:15
    #8 0x45aa31 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:599:15
    #9 0x4447b2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:323:6
    #10 0x44aaf5 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:856:9
    #11 0x474a12 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #12 0x7086bd71c83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #13 0x41f7c8 in _start (/out/coder_JPG_fuzzer+0x41f7c8)

DEDUP_TOKEN: decompress_smooth_data--process_data_simple_main--jpeg_read_scanlines
0x6120000007d8 is located 121 bytes to the right of 287-byte region [0x612000000640,0x61200000075f)
allocated by thread T0 here:
    #0 0x52315d in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:145:3
    #1 0xd72b76 in alloc_large /src/libjpeg-turbo/jmemmgr.c:391:29
    #2 0xd72b76 in alloc_barray /src/libjpeg-turbo/jmemmgr.c:527:28
    #3 0xd72b76 in realize_virt_arrays /src/libjpeg-turbo/jmemmgr.c:741:26
    #4 0xd3db75 in master_selection /src/libjpeg-turbo/jdmaster.c:561:3
    #5 0xd3db75 in jinit_master_decompress /src/libjpeg-turbo/jdmaster.c:725:3
    #6 0xd1defe in jpeg_start_decompress /src/libjpeg-turbo/jdapistd.c:49:5
    #7 0x95d918 in ReadJPEGImage /src/graphicsmagick/coders/jpeg.c:1451:10
    #8 0x601983 in ReadImage /src/graphicsmagick/magick/constitute.c:1630:13
    #9 0x5b65d8 in BlobToImage /src/graphicsmagick/magick/blob.c:764:13
    #10 0x55d57f in Magick::Image::read(Magick::Blob const&) /src/graphicsmagick/Magick++/lib/Image.cpp:1591:5
    #11 0x556037 in LLVMFuzzerTestOneInput /src/graphicsmagick/fuzzing/coder_fuzzer.cc:22:15
    #12 0x45aa31 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:599:15
    #13 0x4447b2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:323:6
    #14 0x44aaf5 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:856:9
    #15 0x474a12 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #16 0x7086bd71c83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: malloc--alloc_large--alloc_barray
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libjpeg-turbo/jdcoefct.c:594:23 in decompress_smooth_data
Shadow bytes around the buggy address:
  0x0c247fff80a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c247fff80b0: 00 00 00 00 00 00 00 00 00 00 00 07 fa fa fa fa
  0x0c247fff80c0: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00
  0x0c247fff80d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c247fff80e0: 00 00 00 00 00 00 00 00 00 00 00 07 fa fa fa fa
=>0x0c247fff80f0: fa fa fa fa fa fa fa fa fa fa fa[fa]fa fa fa fa
  0x0c247fff8100: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c247fff8110: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c247fff8120: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c247fff8130: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c247fff8140: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==7==ABORTING
