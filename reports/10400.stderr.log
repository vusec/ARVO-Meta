INFO: Seed: 1865530770
INFO: Loaded 1 modules   (74411 inline 8-bit counters): 74411 [0x1353f08, 0x13661b3), 
INFO: Loaded 1 PC tables (74411 PCs): 74411 [0x13661b8,0x1488c68), 
/out/coder_MNG_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==7==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000000151 at pc 0x0000007c6cbf bp 0x7ffe699c0280 sp 0x7ffe699c0278
READ of size 1 at 0x602000000151 thread T0
SCARINESS: 12 (1-byte-read-heap-buffer-overflow)
    #0 0x7c6cbe in mng_get_long /src/graphicsmagick/coders/png.c:1018:38
    #1 0x7b46a7 in ReadMNGImage /src/graphicsmagick/coders/png.c:4920:30
    #2 0x646f9a in ReadImage /src/graphicsmagick/magick/constitute.c:1607:13
    #3 0x5fe2e4 in BlobToImage /src/graphicsmagick/magick/blob.c:764:13
    #4 0x5b408f in Magick::Image::read(Magick::Blob const&) /src/graphicsmagick/Magick++/lib/Image.cpp:1591:5
    #5 0x52a6e6 in LLVMFuzzerTestOneInput /src/graphicsmagick/fuzzing/coder_fuzzer.cc:20:15
    #6 0x5540dc in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/libfuzzer/FuzzerLoop.cpp:520:13
    #7 0x52b6da in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/libfuzzer/FuzzerDriver.cpp:280:6
    #8 0x536f2b in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/libfuzzer/FuzzerDriver.cpp:701:9
    #9 0x52ad7c in main /src/libfuzzer/FuzzerMain.cpp:20:10
    #10 0x76d432ecb83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #11 0x41dd88 in _start (/out/coder_MNG_fuzzer+0x41dd88)

DEDUP_TOKEN: mng_get_long--ReadMNGImage--ReadImage
0x602000000151 is located 0 bytes to the right of 1-byte region [0x602000000150,0x602000000151)
allocated by thread T0 here:
    #0 0x4eada7 in malloc /src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:98
    #1 0x7ae1e2 in ReadMNGImage /src/graphicsmagick/coders/png.c:4196:21
    #2 0x646f9a in ReadImage /src/graphicsmagick/magick/constitute.c:1607:13
    #3 0x5fe2e4 in BlobToImage /src/graphicsmagick/magick/blob.c:764:13
    #4 0x5b408f in Magick::Image::read(Magick::Blob const&) /src/graphicsmagick/Magick++/lib/Image.cpp:1591:5
    #5 0x52a6e6 in LLVMFuzzerTestOneInput /src/graphicsmagick/fuzzing/coder_fuzzer.cc:20:15
    #6 0x5540dc in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/libfuzzer/FuzzerLoop.cpp:520:13
    #7 0x52b6da in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/libfuzzer/FuzzerDriver.cpp:280:6
    #8 0x536f2b in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/libfuzzer/FuzzerDriver.cpp:701:9
    #9 0x52ad7c in main /src/libfuzzer/FuzzerMain.cpp:20:10
    #10 0x76d432ecb83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: malloc--ReadMNGImage--ReadImage
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/graphicsmagick/coders/png.c:1018:38 in mng_get_long
Shadow bytes around the buggy address:
  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff8000: fa fa fd fa fa fa fd fa fa fa 00 00 fa fa 00 fa
  0x0c047fff8010: fa fa 00 fa fa fa 00 fa fa fa 00 00 fa fa 00 00
=>0x0c047fff8020: fa fa fd fd fa fa 00 00 fa fa[01]fa fa fa fa fa
  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==7==ABORTING
