INFO: Seed: 3268422358
INFO: Loaded 1 modules   (83953 inline 8-bit counters): 83953 [0x1509c88, 0x151e479),
INFO: Loaded 1 PC tables (83953 PCs): 83953 [0x151e480,0x1666390),
/out/coder_BIGTIFF_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x621000009d00 at pc 0x000000b05086 bp 0x7fff7ccda690 sp 0x7fff7ccda688
WRITE of size 4 at 0x621000009d00 thread T0
SCARINESS: 36 (4-byte-write-heap-buffer-overflow)
    #0 0xb05085 in put1bitbwtile /src/libtiff/libtiff/tif_getimage.c:1377:2
    #1 0xafc904 in gtStripContig /src/libtiff/libtiff/tif_getimage.c:971:3
    #2 0xafa682 in TIFFReadRGBAImageOriented /src/libtiff/libtiff/tif_getimage.c:530:8
    #3 0x97bcef in ReadTIFFImage /src/graphicsmagick/coders/tiff.c:3269:18
    #4 0x64702a in ReadImage /src/graphicsmagick/magick/constitute.c:1607:13
    #5 0x5fe374 in BlobToImage /src/graphicsmagick/magick/blob.c:764:13
    #6 0x5b411f in Magick::Image::read(Magick::Blob const&) /src/graphicsmagick/Magick++/lib/Image.cpp:1591:5
    #7 0x52a776 in LLVMFuzzerTestOneInput /src/graphicsmagick/fuzzing/coder_fuzzer.cc:20:15
    #8 0x55416c in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/libfuzzer/FuzzerLoop.cpp:520:13
    #9 0x52b76a in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/libfuzzer/FuzzerDriver.cpp:280:6
    #10 0x536fbb in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/libfuzzer/FuzzerDriver.cpp:701:9
    #11 0x52ae0c in main /src/libfuzzer/FuzzerMain.cpp:20:10
    #12 0x795d410dc83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #13 0x41de18 in _start (/out/coder_BIGTIFF_fuzzer+0x41de18)

DEDUP_TOKEN: put1bitbwtile--gtStripContig--TIFFReadRGBAImageOriented
0x621000009d00 is located 0 bytes to the right of 4096-byte region [0x621000008d00,0x621000009d00)
allocated by thread T0 here:
    #0 0x4eae37 in malloc /src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:98
    #1 0x97bc89 in ReadTIFFImage /src/graphicsmagick/coders/tiff.c:3260:20
    #2 0x64702a in ReadImage /src/graphicsmagick/magick/constitute.c:1607:13
    #3 0x5fe374 in BlobToImage /src/graphicsmagick/magick/blob.c:764:13
    #4 0x5b411f in Magick::Image::read(Magick::Blob const&) /src/graphicsmagick/Magick++/lib/Image.cpp:1591:5
    #5 0x52a776 in LLVMFuzzerTestOneInput /src/graphicsmagick/fuzzing/coder_fuzzer.cc:20:15
    #6 0x55416c in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/libfuzzer/FuzzerLoop.cpp:520:13
    #7 0x52b76a in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/libfuzzer/FuzzerDriver.cpp:280:6
    #8 0x536fbb in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/libfuzzer/FuzzerDriver.cpp:701:9
    #9 0x52ae0c in main /src/libfuzzer/FuzzerMain.cpp:20:10
    #10 0x795d410dc83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: malloc--ReadTIFFImage--ReadImage
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libtiff/libtiff/tif_getimage.c:1377:2 in put1bitbwtile
Shadow bytes around the buggy address:
  0x0c427fff9350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c427fff9360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c427fff9370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c427fff9380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c427fff9390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c427fff93a0:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c427fff93b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c427fff93c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c427fff93d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c427fff93e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c427fff93f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING