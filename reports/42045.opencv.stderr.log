Accepting input from '/tmp/poc'
Usage for fuzzing: honggfuzz -P [flags] -- /out/imread_fuzzer
=================================================================
==13==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7be005e12920 at pc 0x000000437ef6 bp 0x7ffee3dd57d0 sp 0x7ffee3dd4f90
READ of size 257 at 0x7be005e12920 thread T0
SCARINESS: 41 (multi-byte-read-stack-buffer-overflow)
    #0 0x437ef5 in __interceptor_strlen /src/llvm-project/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:389:5
    #1 0x1851a40 in length /usr/local/bin/../include/c++/v1/__string:344:53
    #2 0x1851a40 in basic_string<std::nullptr_t> /usr/local/bin/../include/c++/v1/string:828:19
    #3 0x1851a40 in Imf_opencv::DwaCompressor::Classifier::Classifier(char const*&, int) /src/opencv/3rdparty/openexr/IlmImf/ImfDwaCompressor.cpp:272:23
    #4 0x184ab4e in Imf_opencv::DwaCompressor::uncompress(char const*, int, Imath_opencv::Box<Imath_opencv::Vec2<int> >, char const*&) /src/opencv/3rdparty/openexr/IlmImf/ImfDwaCompressor.cpp:2434:24
    #5 0x1849449 in Imf_opencv::DwaCompressor::uncompress(char const*, int, int, char const*&) /src/opencv/3rdparty/openexr/IlmImf/ImfDwaCompressor.cpp:2312:12
    #6 0x1776b23 in Imf_opencv::(anonymous namespace)::LineBufferTask::execute() /src/opencv/3rdparty/openexr/IlmImf/ImfScanLineInputFile.cpp:542:66
    #7 0x17bb8fa in IlmThread_opencv::(anonymous namespace)::NullThreadPoolProvider::addTask(IlmThread_opencv::Task*) /src/opencv/3rdparty/openexr/IlmThread/IlmThreadPool.cpp:448:12
    #8 0x17bb4a1 in addTask /src/opencv/3rdparty/openexr/IlmThread/IlmThreadPool.cpp:827:28
    #9 0x17bb4a1 in IlmThread_opencv::ThreadPool::addGlobalTask(IlmThread_opencv::Task*) /src/opencv/3rdparty/openexr/IlmThread/IlmThreadPool.cpp:847:24
    #10 0x1767eca in Imf_opencv::ScanLineInputFile::readPixels(int, int) /src/opencv/3rdparty/openexr/IlmImf/ImfScanLineInputFile.cpp:1614:17
    #11 0x17106ce in Imf_opencv::InputFile::readPixels(int, int) /src/opencv/3rdparty/openexr/IlmImf/ImfInputFile.cpp:815:23
    #12 0x519fcf in cv::ExrDecoder::readData(cv::Mat&) /src/opencv/modules/imgcodecs/src/grfmt_exr.cpp:371:21
    #13 0x4e8afe in imread_ /src/opencv/modules/imgcodecs/src/loadsave.cpp:464:22
    #14 0x4e8afe in cv::imread(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) /src/opencv/modules/imgcodecs/src/loadsave.cpp:627:5
    #15 0x4e7868 in LLVMFuzzerTestOneInput /src/imread_fuzzer.cc:11:22
    #16 0x4dd8ab in main (/out/imread_fuzzer+0x4dd8ab)
    #17 0x7be005ece082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)
    #18 0x422e1d in _start (/out/imread_fuzzer+0x422e1d)

DEDUP_TOKEN: __interceptor_strlen--length--basic_string<std::nullptr_t>
Address 0x7be005e12920 is located in stack of thread T0 at offset 288 in frame
    #0 0x18517ef in Imf_opencv::DwaCompressor::Classifier::Classifier(char const*&, int) /src/opencv/3rdparty/openexr/IlmImf/ImfDwaCompressor.cpp:263

DEDUP_TOKEN: Imf_opencv::DwaCompressor::Classifier::Classifier(char const*&, int)
  This frame has 2 object(s):
    [32, 288) 'suffix' (line 269)
    [352, 376) 'ref.tmp5' (line 272) <== Memory access at offset 288 partially underflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /src/llvm-project/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:389:5 in __interceptor_strlen
Shadow bytes around the buggy address:
  0x0f7c80bba4d0: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0f7c80bba4e0: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0f7c80bba4f0: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0f7c80bba500: f1 f1 f1 f1 00 00 00 00 00 00 00 00 00 00 00 00
  0x0f7c80bba510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0f7c80bba520: 00 00 00 00[f2]f2 f2 f2 f2 f2 f2 f2 00 00 00 f3
  0x0f7c80bba530: f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00
  0x0f7c80bba540: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0f7c80bba550: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0f7c80bba560: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0f7c80bba570: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING