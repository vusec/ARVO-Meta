INFO: Seed: 452037084
INFO: Loaded 1 modules (20156 guards): [0xd7a410, 0xd8df00),
/out/ffmpeg_AV_CODEC_ID_VP9_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x72a6b46068a0 at pc 0x0000005bc6f5 bp 0x7ffe223d5a90 sp 0x7ffe223d5a88
WRITE of size 2 at 0x72a6b46068a0 thread T0
SCARINESS: 48 (2-byte-write-stack-buffer-overflow)
    #0 0x5bc6f4 in do_bilin_2d_c /src/ffmpeg/libavcodec/vp9dsp_template.c:2175:24
    #1 0x5bc6f4 in put_bilin_2d_hv_c /src/ffmpeg/libavcodec/vp9dsp_template.c:2205
    #2 0x5b6a07 in put_bilin_16hv_c /src/ffmpeg/libavcodec/vp9dsp_template.c:2254:1
    #3 0x6b8131 in mc_chroma_unscaled /src/ffmpeg/libavcodec/vp9recon.c:365:9
    #4 0x6b8131 in inter_pred_16bpp /src/ffmpeg/libavcodec/vp9_mc_template.c:418
    #5 0x6602a6 in inter_recon /src/ffmpeg/libavcodec/vp9recon.c:580:13
    #6 0x6602a6 in ff_vp9_inter_recon_16bpp /src/ffmpeg/libavcodec/vp9recon.c:638
    #7 0x560793 in ff_vp9_decode_block /src/ffmpeg/libavcodec/vp9block.c:1391:13
    #8 0x55b3ce in decode_sb /src/ffmpeg/libavcodec/vp9.c:953:17
    #9 0x55b86c in decode_sb /src/ffmpeg/libavcodec/vp9.c:968:17
    #10 0x54a51d in vp9_decode_frame /src/ffmpeg/libavcodec/vp9.c:1314:29
    #11 0x529e93 in decode_simple_internal /src/ffmpeg/libavcodec/decode.c:417:15
    #12 0x529984 in decode_simple_receive_frame /src/ffmpeg/libavcodec/decode.c:620:15
    #13 0x520a8e in decode_receive_frame_internal /src/ffmpeg/libavcodec/decode.c:638:15
    #14 0x52000d in avcodec_send_packet /src/ffmpeg/libavcodec/decode.c:678:15
    #15 0x52193d in compat_decode /src/ffmpeg/libavcodec/decode.c:853:15
    #16 0x518dc7 in LLVMFuzzerTestOneInput /src/ffmpeg/tools/target_dec_fuzzer.c:216:23
    #17 0x91b509 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/libfuzzer/FuzzerLoop.cpp:458:13
    #18 0x91bd3a in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long) /src/libfuzzer/FuzzerLoop.cpp:397:3
    #19 0x8f2c46 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/libfuzzer/FuzzerDriver.cpp:268:6
    #20 0x8fe1d0 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/libfuzzer/FuzzerDriver.cpp:683:9
    #21 0x8f2258 in main /src/libfuzzer/FuzzerMain.cpp:20:10
    #22 0x72a6b465183f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #23 0x41d658 in _start (/out/ffmpeg_AV_CODEC_ID_VP9_fuzzer+0x41d658)

DEDUP_TOKEN: do_bilin_2d_c--put_bilin_2d_hv_c--put_bilin_16hv_c
Address 0x72a6b46068a0 is located in stack of thread T0 at offset 8352 in frame
    #0 0x5bc2ff in put_bilin_2d_hv_c /src/ffmpeg/libavcodec/vp9dsp_template.c:2205

DEDUP_TOKEN: put_bilin_2d_hv_c
  This frame has 1 object(s):
    [32, 8352) 'tmp.i' (line 2164) <== Memory access at offset 8352 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /src/ffmpeg/libavcodec/vp9dsp_template.c:2175:24 in do_bilin_2d_c
Shadow bytes around the buggy address:
  0x0e55568b8cc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0e55568b8cd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0e55568b8ce0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0e55568b8cf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0e55568b8d00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0e55568b8d10: 00 00 00 00[f3]f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
  0x0e55568b8d20: f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
  0x0e55568b8d30: f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00
  0x0e55568b8d40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0e55568b8d50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0e55568b8d60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING