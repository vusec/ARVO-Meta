INFO: Seed: 3272696748
INFO: Loaded 1 modules   (38513 inline 8-bit counters): 38513 [0xfce108, 0xfd7779),
INFO: Loaded 1 PC tables (38513 PCs): 38513 [0xc1c2b0,0xcb29c0),
/out/ffmpeg_AV_CODEC_ID_IMM4_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x63300001884f at pc 0x000000551918 bp 0x7ffff5631790 sp 0x7ffff5631788
READ of size 8 at 0x63300001884f thread T0
SCARINESS: 23 (8-byte-read-heap-buffer-overflow)
    #0 0x551917 in copy_block16 /src/ffmpeg/libavcodec/copy_block.h:72:9
    #1 0x54f4c5 in decode_inter /src/ffmpeg/libavcodec/imm4.c:291:17
    #2 0x54ddcc in decode_frame /src/ffmpeg/libavcodec/imm4.c:477:15
    #3 0x549fa4 in decode_simple_internal /src/ffmpeg/libavcodec/decode.c:433:15
    #4 0x549c01 in decode_simple_receive_frame /src/ffmpeg/libavcodec/decode.c:629:15
    #5 0x53fa51 in decode_receive_frame_internal /src/ffmpeg/libavcodec/decode.c:647:15
    #6 0x53f862 in avcodec_send_packet /src/ffmpeg/libavcodec/decode.c:705:15
    #7 0x540490 in compat_decode /src/ffmpeg/libavcodec/decode.c:796:15
    #8 0x536e71 in LLVMFuzzerTestOneInput /src/ffmpeg/tools/target_dec_fuzzer.c:245:23
    #9 0xa1e1c6 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/libfuzzer/FuzzerLoop.cpp:529:15
    #10 0x9de516 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/libfuzzer/FuzzerDriver.cpp:286:6
    #11 0x9ea043 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/libfuzzer/FuzzerDriver.cpp:715:9
    #12 0x9ddb8c in main /src/libfuzzer/FuzzerMain.cpp:19:10
    #13 0x702c68a6e83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #14 0x41dbc8 in _start (/out/ffmpeg_AV_CODEC_ID_IMM4_fuzzer+0x41dbc8)

DEDUP_TOKEN: copy_block16--decode_inter--decode_frame
0x63300001884f is located 0 bytes to the right of 98383-byte region [0x633000000800,0x63300001884f)
allocated by thread T0 here:
    #0 0x4f1928 in __interceptor_posix_memalign /src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:218
    #1 0x980316 in av_malloc /src/ffmpeg/libavutil/mem.c:87:9
    #2 0x95db7c in av_buffer_alloc /src/ffmpeg/libavutil/buffer.c:72:12
    #3 0x95dc59 in av_buffer_allocz /src/ffmpeg/libavutil/buffer.c:85:24
    #4 0x95f4fb in pool_alloc_buffer /src/ffmpeg/libavutil/buffer.c:313:26
    #5 0x95f1ae in av_buffer_pool_get /src/ffmpeg/libavutil/buffer.c:349:15
    #6 0x546578 in video_get_buffer /src/ffmpeg/libavcodec/decode.c:1634:23
    #7 0x548982 in get_buffer_internal /src/ffmpeg/libavcodec/decode.c:1896:11
    #8 0x5485e2 in ff_get_buffer /src/ffmpeg/libavcodec/decode.c:1921:15
    #9 0x54db81 in decode_frame /src/ffmpeg/libavcodec/imm4.c:460:16
    #10 0x549fa4 in decode_simple_internal /src/ffmpeg/libavcodec/decode.c:433:15
    #11 0x549c01 in decode_simple_receive_frame /src/ffmpeg/libavcodec/decode.c:629:15
    #12 0x53fa51 in decode_receive_frame_internal /src/ffmpeg/libavcodec/decode.c:647:15
    #13 0x53f862 in avcodec_send_packet /src/ffmpeg/libavcodec/decode.c:705:15
    #14 0x540490 in compat_decode /src/ffmpeg/libavcodec/decode.c:796:15
    #15 0x536e71 in LLVMFuzzerTestOneInput /src/ffmpeg/tools/target_dec_fuzzer.c:245:23
    #16 0xa1e1c6 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/libfuzzer/FuzzerLoop.cpp:529:15
    #17 0x9de516 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/libfuzzer/FuzzerDriver.cpp:286:6
    #18 0x9ea043 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/libfuzzer/FuzzerDriver.cpp:715:9
    #19 0x9ddb8c in main /src/libfuzzer/FuzzerMain.cpp:19:10
    #20 0x702c68a6e83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: __interceptor_posix_memalign--av_malloc--av_buffer_alloc
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/ffmpeg/libavcodec/copy_block.h:72:9 in copy_block16
Shadow bytes around the buggy address:
  0x0c667fffb0b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c667fffb0c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c667fffb0d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c667fffb0e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c667fffb0f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c667fffb100: 00 00 00 00 00 00 00 00 00[07]fa fa fa fa fa fa
  0x0c667fffb110: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c667fffb120: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c667fffb130: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c667fffb140: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c667fffb150: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING