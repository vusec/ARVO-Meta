INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 3288942318
INFO: Loaded 1 modules   (25080 inline 8-bit counters): 25080 [0x5c685e14a1b8, 0x5c685e1503b0),
INFO: Loaded 1 PC tables (25080 PCs): 25080 [0x5c685e1503b0,0x5c685e1b2330),
/out/djxl_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x621000045d00 at pc 0x5c685dfdd8af bp 0x7ffe6c551510 sp 0x7ffe6c551508
READ of size 4 at 0x621000045d00 thread T0
SCARINESS: 17 (4-byte-read-heap-buffer-overflow)
    #0 0x5c685dfdd8ae in jxl::(anonymous namespace)::WriteToPixelCallbackStage::ProcessRow(std::__1::vector<std::__1::vector<float*, std::__1::allocator<float*> >, std::__1::allocator<std::__1::vector<float*, std::__1::allocator<float*> > > > const&, std::__1::vector<std::__1::vector<float*, std::__1::allocator<float*> >, std::__1::allocator<std::__1::vector<float*, std::__1::allocator<float*> > > > const&, unsigned long, unsigned long, unsigned long, unsigned long, float*) const /src/libjxl/lib/jxl/render_pipeline/stage_write.cc:309:23
    #1 0x5c685df8988c in jxl::LowMemoryRenderPipeline::RenderRect(unsigned long, std::__1::vector<jxl::Plane<float>, std::__1::allocator<jxl::Plane<float> > >&, jxl::Rect, jxl::Rect) /src/libjxl/lib/jxl/render_pipeline/low_memory_render_pipeline.cc:635:19
    #2 0x5c685df8e56c in jxl::LowMemoryRenderPipeline::ProcessBuffers(unsigned long, unsigned long) /src/libjxl/lib/jxl/render_pipeline/low_memory_render_pipeline.cc:777:5
    #3 0x5c685decfe20 in operator() /src/libjxl/lib/jxl/dec_modular.cc:621:3
    #4 0x5c685decfe20 in jxl::ThreadPool::RunCallState<jxl::ModularFrameDecoder::FinalizeDecoding(jxl::PassesDecoderState*, jxl::ThreadPool*, jxl::ImageBundle*, bool)::$_4, jxl::ModularFrameDecoder::FinalizeDecoding(jxl::PassesDecoderState*, jxl::ThreadPool*, jxl::ImageBundle*, bool)::$_5>::CallDataFunc(void*, unsigned int, unsigned long) /src/libjxl/lib/jxl/base/data_parallel.h:81:14
    #5 0x5c685dd488e1 in jxl::ThreadPool::SequentialRunnerStatic(void*, void*, int (*)(void*, unsigned long), void (*)(void*, unsigned int, unsigned long), unsigned int, unsigned int) /src/libjxl/lib/jxl/base/data_parallel.cc:18:5
    #6 0x5c685decbdcd in Run<(lambda at /src/libjxl/lib/jxl/dec_modular.cc:621:3), (lambda at /src/libjxl/lib/jxl/dec_modular.cc:621:3)> /src/libjxl/lib/jxl/base/data_parallel.h:50:12
    #7 0x5c685decbdcd in RunOnPool<(lambda at /src/libjxl/lib/jxl/dec_modular.cc:621:3), (lambda at /src/libjxl/lib/jxl/dec_modular.cc:621:3)> /src/libjxl/lib/jxl/base/data_parallel.h:106:25
    #8 0x5c685decbdcd in jxl::ModularFrameDecoder::FinalizeDecoding(jxl::PassesDecoderState*, jxl::ThreadPool*, jxl::ImageBundle*, bool) /src/libjxl/lib/jxl/dec_modular.cc:621:3
    #9 0x5c685dd950be in jxl::FrameDecoder::Flush() /src/libjxl/lib/jxl/dec_frame.cc:888:3
    #10 0x5c685dd8bb18 in jxl::FrameDecoder::FinalizeFrame() /src/libjxl/lib/jxl/dec_frame.cc:982:3
    #11 0x5c685dc35c08 in JxlDecoderProcessCodestream /src/libjxl/lib/jxl/decode.cc:1522:28
    #12 0x5c685dc35c08 in HandleBoxes /src/libjxl/lib/jxl/decode.cc:1966:11
    #13 0x5c685dc35c08 in JxlDecoderProcessInput /src/libjxl/lib/jxl/decode.cc:2131:29
    #14 0x5c685dc1d2ce in DecodeJpegXl /src/libjxl/tools/djxl_fuzzer.cc:178:31
    #15 0x5c685dc1d2ce in TestOneInput /src/libjxl/tools/djxl_fuzzer.cc:559:3
    #16 0x5c685dc1d2ce in LLVMFuzzerTestOneInput /src/libjxl/tools/djxl_fuzzer.cc:569:10
    #17 0x5c685db136d2 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #18 0x5c685daff282 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #19 0x5c685db04aec in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #20 0x5c685db2d482 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #21 0x72640c7d2082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)
    #22 0x5c685dadd9cd in _start (/out/djxl_fuzzer+0xf29cd)

DEDUP_TOKEN: jxl::(anonymous namespace)::WriteToPixelCallbackStage::ProcessRow(std::__1::vector<std::__1::vector<float*, std::__1::allocator<float*> >, std::__1::allocator<std::__1::vector<float*, std::__1::allocator<float*> > > > const&, std::__1::vector<std::__1::vector<float*, std::__1::allocator<float*> >, std::__1::allocator<std::__1::vector<float*, std::__1::allocator<float*> > > > const&, unsigned long, unsigned long, unsigned long, unsigned long, float*) const--jxl::LowMemoryRenderPipeline::RenderRect(unsigned long, std::__1::vector<jxl::Plane<float>, std::__1::allocator<jxl::Plane<float> > >&, jxl::Rect, jxl::Rect)--jxl::LowMemoryRenderPipeline::ProcessBuffers(unsigned long, unsigned long)
0x621000045d00 is located 0 bytes to the right of 4096-byte region [0x621000044d00,0x621000045d00)
allocated by thread T0 here:
    #0 0x5c685dc1964d in operator new(unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:95:3
    #1 0x5c685dfd393e in __libcpp_operator_new<unsigned long> /usr/local/bin/../include/c++/v1/new:245:10
    #2 0x5c685dfd393e in __libcpp_allocate /usr/local/bin/../include/c++/v1/new:271:10
    #3 0x5c685dfd393e in allocate /usr/local/bin/../include/c++/v1/__memory/allocator.h:105:38
    #4 0x5c685dfd393e in allocate /usr/local/bin/../include/c++/v1/__memory/allocator_traits.h:262:20
    #5 0x5c685dfd393e in __vallocate /usr/local/bin/../include/c++/v1/vector:1000:37
    #6 0x5c685dfd393e in vector /usr/local/bin/../include/c++/v1/vector:1162:9
    #7 0x5c685dfd393e in WriteToPixelCallbackStage /src/libjxl/lib/jxl/render_pipeline/stage_write.cc:282:9
    #8 0x5c685dfd393e in make_unique<jxl::(anonymous namespace)::WriteToPixelCallbackStage, const std::__1::function<void (const float *, unsigned long, unsigned long, unsigned long)> &, unsigned long &, unsigned long &, bool &, bool &, unsigned long &> /src/libjxl/lib/jxl/common.h:153:33
    #9 0x5c685dfd393e in jxl::GetWriteToPixelCallbackStage(std::__1::function<void (float const*, unsigned long, unsigned long, unsigned long)> const&, unsigned long, unsigned long, bool, bool, unsigned long) /src/libjxl/lib/jxl/render_pipeline/stage_write.cc:359:10
    #10 0x5c685df7b62a in jxl::PassesDecoderState::PreparePipeline(jxl::ImageBundle*, jxl::PassesDecoderState::PipelineOptions) /src/libjxl/lib/jxl/dec_cache.cc:184:24
    #11 0x5c685dd8a0f4 in jxl::FrameDecoder::ProcessSections(jxl::FrameDecoder::SectionInfo const*, unsigned long, jxl::FrameDecoder::SectionStatus*) /src/libjxl/lib/jxl/dec_frame.cc:744:5
    #12 0x5c685dc3595a in JxlDecoderProcessCodestream /src/libjxl/lib/jxl/decode.cc:1490:27
    #13 0x5c685dc3595a in HandleBoxes /src/libjxl/lib/jxl/decode.cc:1966:11
    #14 0x5c685dc3595a in JxlDecoderProcessInput /src/libjxl/lib/jxl/decode.cc:2131:29
    #15 0x5c685dc1d2ce in DecodeJpegXl /src/libjxl/tools/djxl_fuzzer.cc:178:31
    #16 0x5c685dc1d2ce in TestOneInput /src/libjxl/tools/djxl_fuzzer.cc:559:3
    #17 0x5c685dc1d2ce in LLVMFuzzerTestOneInput /src/libjxl/tools/djxl_fuzzer.cc:569:10
    #18 0x5c685db136d2 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #19 0x5c685daff282 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #20 0x5c685db04aec in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #21 0x5c685db2d482 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #22 0x72640c7d2082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)

DEDUP_TOKEN: operator new(unsigned long)--__libcpp_operator_new<unsigned long>--__libcpp_allocate
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libjxl/lib/jxl/render_pipeline/stage_write.cc:309:23 in jxl::(anonymous namespace)::WriteToPixelCallbackStage::ProcessRow(std::__1::vector<std::__1::vector<float*, std::__1::allocator<float*> >, std::__1::allocator<std::__1::vector<float*, std::__1::allocator<float*> > > > const&, std::__1::vector<std::__1::vector<float*, std::__1::allocator<float*> >, std::__1::allocator<std::__1::vector<float*, std::__1::allocator<float*> > > > const&, unsigned long, unsigned long, unsigned long, unsigned long, float*) const
Shadow bytes around the buggy address:
  0x0c4280000b50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c4280000b60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c4280000b70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c4280000b80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c4280000b90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c4280000ba0:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c4280000bb0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c4280000bc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c4280000bd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c4280000be0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c4280000bf0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING