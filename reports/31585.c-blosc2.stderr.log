INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 103416956
INFO: Loaded 1 modules   (44456 inline 8-bit counters): 44456 [0xdbb840, 0xdc65e8),
INFO: Loaded 1 PC tables (44456 PCs): 44456 [0xab5cd0,0xb63750),
/out/decompress_frame_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60f000005b0d at pc 0x0000005b68ae bp 0x7ffd39e5eb50 sp 0x7ffd39e5eb48
READ of size 4 at 0x60f000005b0d thread T0
SCARINESS: 27 (4-byte-read-heap-buffer-overflow-far-from-bounds)
    #0 0x5b68ad in sw32_ /src/c-blosc2/blosc/blosc-private.h:90:13
    #1 0x5b68ad in initialize_context_decompression /src/c-blosc2/blosc/blosc2.c:1803:34
    #2 0x5b68ad in blosc_run_decompression_with_context /src/c-blosc2/blosc/blosc2.c:2350:8
    #3 0x5b69cc in blosc2_decompress_ctx /src/c-blosc2/blosc/blosc2.c:2376:12
    #4 0x5f4d3e in frame_decompress_chunk /src/c-blosc2/blosc/frame.c:2666:23
    #5 0x55dba6 in LLVMFuzzerTestOneInput /src/c-blosc2/tests/fuzz/fuzz_decompress_frame.c:38:15
    #6 0x4612e1 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:599:15
    #7 0x44afa2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:323:6
    #8 0x4512f6 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:856:9
    #9 0x47b2e2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #10 0x7177d37d483f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #11 0x425968 in _start (/out/decompress_frame_fuzzer+0x425968)

DEDUP_TOKEN: sw32_--initialize_context_decompression--blosc_run_decompression_with_context
Address 0x60f000005b0d is a wild pointer.
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/c-blosc2/blosc/blosc-private.h:90:13 in sw32_
Shadow bytes around the buggy address:
  0x0c1e7fff8b10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1e7fff8b20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1e7fff8b30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1e7fff8b40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1e7fff8b50: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
=>0x0c1e7fff8b60: fa[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1e7fff8b70: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1e7fff8b80: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1e7fff8b90: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1e7fff8ba0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1e7fff8bb0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING