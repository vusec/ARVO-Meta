INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 3281630948
INFO: Loaded 1 modules   (32092 inline 8-bit counters): 32092 [0x5aef7b675228, 0x5aef7b67cf84),
INFO: Loaded 1 PC tables (32092 PCs): 32092 [0x5aef7b67cf88,0x5aef7b6fa548),
/out/djxl_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x736f9122e7d8 at pc 0x5aef7adda602 bp 0x736f92bffc70 sp 0x736f92bffc68
WRITE of size 4 at 0x736f9122e7d8 thread T2
SCARINESS: 46 (4-byte-write-heap-buffer-overflow-far-from-bounds)
    #0 0x5aef7adda601 in StoreLE32 /src/libjxl/lib/jxl/base/byte_order.h:199:3
    #1 0x5aef7adda601 in StoreLEFloat /src/libjxl/lib/jxl/dec_external_image.cc:111:3
    #2 0x5aef7adda601 in StoreFloatRow<&jxl::(anonymous namespace)::StoreLEFloat> /src/libjxl/lib/jxl/dec_external_image.cc:236:7
    #3 0x5aef7adda601 in operator() /src/libjxl/lib/jxl/dec_external_image.cc:405:15
    #4 0x5aef7adda601 in jxl::ThreadPool::RunCallState<jxl::ConvertToExternal(jxl::ImageBundle const&, unsigned long, bool, unsigned long, JxlEndianness, unsigned long, jxl::ThreadPool*, void*, unsigned long, void (*)(void*, unsigned long, unsigned long, unsigned long, void const*), void*, jxl::Orientation)::$_3, jxl::ConvertToExternal(jxl::ImageBundle const&, unsigned long, bool, unsigned long, JxlEndianness, unsigned long, jxl::ThreadPool*, void*, unsigned long, void (*)(void*, unsigned long, unsigned long, unsigned long, void const*), void*, jxl::Orientation)::$_4>::CallDataFunc(void*, unsigned int, unsigned long) /src/libjxl/lib/jxl/base/data_parallel.h:88:14
    #5 0x5aef7b2c8739 in RunRange /src/libjxl/lib/threads/thread_parallel_runner_internal.cc:137:7
    #6 0x5aef7b2c8739 in jpegxl::ThreadParallelRunner::ThreadFunc(jpegxl::ThreadParallelRunner*, int) /src/libjxl/lib/threads/thread_parallel_runner_internal.cc:167:9
    #7 0x5aef7b2ca773 in __invoke<void (*)(jpegxl::ThreadParallelRunner *, int), jpegxl::ThreadParallelRunner *, unsigned int> /usr/local/bin/../include/c++/v1/type_traits:3679:1
    #8 0x5aef7b2ca773 in __thread_execute<std::unique_ptr<std::__thread_struct>, void (*)(jpegxl::ThreadParallelRunner *, int), jpegxl::ThreadParallelRunner *, unsigned int, 2, 3> /usr/local/bin/../include/c++/v1/thread:280:5
    #9 0x5aef7b2ca773 in void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(jpegxl::ThreadParallelRunner*, int), jpegxl::ThreadParallelRunner*, unsigned int> >(void*) /usr/local/bin/../include/c++/v1/thread:291:5
    #10 0x736f98c1c6b9 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x76b9)
    #11 0x736f9833051c in clone (/lib/x86_64-linux-gnu/libc.so.6+0x10751c)

DEDUP_TOKEN: StoreLE32--StoreLEFloat--StoreFloatRow<&jxl::(anonymous namespace)::StoreLEFloat>
0x736f9122e7d8 is located 2604 bytes to the right of 4375980-byte region [0x736f90e01800,0x736f9122ddac)
allocated by thread T0 here:
    #0 0x5aef7ac56d7d in operator new(unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:99:3
    #1 0x5aef7ac62fae in __libcpp_operator_new<unsigned long> /usr/local/bin/../include/c++/v1/new:235:10
    #2 0x5aef7ac62fae in __libcpp_allocate /usr/local/bin/../include/c++/v1/new:261:10
    #3 0x5aef7ac62fae in allocate /usr/local/bin/../include/c++/v1/memory:840:38
    #4 0x5aef7ac62fae in allocate /usr/local/bin/../include/c++/v1/__memory/allocator_traits.h:260:20
    #5 0x5aef7ac62fae in __split_buffer /usr/local/bin/../include/c++/v1/__split_buffer:314:29
    #6 0x5aef7ac62fae in std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__append(unsigned long) /usr/local/bin/../include/c++/v1/vector:1093:53
    #7 0x5aef7ac5d78f in resize /usr/local/bin/../include/c++/v1/vector:2024:15
    #8 0x5aef7ac5d78f in DecodeJpegXl /src/libjxl/tools/djxl_fuzzer.cc:350:17
    #9 0x5aef7ac5d78f in TestOneInput /src/libjxl/tools/djxl_fuzzer.cc:472:3
    #10 0x5aef7ac5d78f in LLVMFuzzerTestOneInput /src/libjxl/tools/djxl_fuzzer.cc:482:10
    #11 0x5aef7ab5c013 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:599:15
    #12 0x5aef7ab474b2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:323:6
    #13 0x5aef7ab4d15e in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:856:9
    #14 0x5aef7ab76dd2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #15 0x736f9824983f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: operator new(unsigned long)--__libcpp_operator_new<unsigned long>--__libcpp_allocate
Thread T2 created by T0 here:
    #0 0x5aef7ac102ea in pthread_create /src/llvm-project/compiler-rt/lib/asan/asan_interceptors.cpp:214:3
    #1 0x5aef7b2c9eaf in __libcpp_thread_create /usr/local/bin/../include/c++/v1/__threading_support:509:10
    #2 0x5aef7b2c9eaf in thread<void (&)(jpegxl::ThreadParallelRunner *, int), jpegxl::ThreadParallelRunner *, unsigned int &, void> /usr/local/bin/../include/c++/v1/thread:307:16
    #3 0x5aef7b2c9eaf in construct<std::thread, void (&)(jpegxl::ThreadParallelRunner *, int), jpegxl::ThreadParallelRunner *, unsigned int &> /usr/local/bin/../include/c++/v1/memory:886:28
    #4 0x5aef7b2c9eaf in construct<std::thread, void (&)(jpegxl::ThreadParallelRunner *, int), jpegxl::ThreadParallelRunner *, unsigned int &, void> /usr/local/bin/../include/c++/v1/__memory/allocator_traits.h:288:13
    #5 0x5aef7b2c9eaf in void std::__1::vector<std::__1::thread, std::__1::allocator<std::__1::thread> >::__construct_one_at_end<void (&)(jpegxl::ThreadParallelRunner*, int), jpegxl::ThreadParallelRunner*, unsigned int&>(void (&)(jpegxl::ThreadParallelRunner*, int), jpegxl::ThreadParallelRunner*&&, unsigned int&) /usr/local/bin/../include/c++/v1/vector:926:5
    #6 0x5aef7b2c8d53 in emplace_back<void (&)(jpegxl::ThreadParallelRunner *, int), jpegxl::ThreadParallelRunner *, unsigned int &> /usr/local/bin/../include/c++/v1/vector:1684:9
    #7 0x5aef7b2c8d53 in jpegxl::ThreadParallelRunner::ThreadParallelRunner(int) /src/libjxl/lib/threads/thread_parallel_runner_internal.cc:194:14
    #8 0x5aef7b2c75b8 in JxlThreadParallelRunnerCreate /src/libjxl/lib/threads/thread_parallel_runner.cc:81:19
    #9 0x5aef7ac59f72 in JxlThreadParallelRunnerMake /src/libjxl/lib/include/jxl/thread_parallel_runner_cxx.h:56:7
    #10 0x5aef7ac59f72 in DecodeJpegXl /src/libjxl/tools/djxl_fuzzer.cc:77:17
    #11 0x5aef7ac59f72 in TestOneInput /src/libjxl/tools/djxl_fuzzer.cc:472:3
    #12 0x5aef7ac59f72 in LLVMFuzzerTestOneInput /src/libjxl/tools/djxl_fuzzer.cc:482:10
    #13 0x5aef7ab5c013 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:599:15
    #14 0x5aef7ab474b2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:323:6
    #15 0x5aef7ab4d15e in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:856:9
    #16 0x5aef7ab76dd2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #17 0x736f9824983f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: pthread_create--__libcpp_thread_create--thread<void (&)(jpegxl::ThreadParallelRunner *, int), jpegxl::ThreadParallelRunner *, unsigned int &, void>
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libjxl/lib/jxl/base/byte_order.h:199:3 in StoreLE32
Shadow bytes around the buggy address:
  0x0e6e7223dca0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0e6e7223dcb0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0e6e7223dcc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0e6e7223dcd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0e6e7223dce0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
=>0x0e6e7223dcf0: fa fa fa fa fa fa fa fa fa fa fa[fa]fa fa fa fa
  0x0e6e7223dd00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0e6e7223dd10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0e6e7223dd20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0e6e7223dd30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0e6e7223dd40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING