======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/compress_fuzzer < INPUT_FILE
or
  /out/compress_fuzzer INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/compress_fuzzer [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x62100000611e at pc 0x00000055aafb bp 0x7ffc05fd8230 sp 0x7ffc05fd8228
WRITE of size 1 at 0x62100000611e thread T0
SCARINESS: 31 (1-byte-write-heap-buffer-overflow)
    #0 0x55aafa in _sw32 /src/c-blosc2/blosc/blosc-private.h:71:14
    #1 0x55aafa in blosc_c /src/c-blosc2/blosc/blosc2.c:777:7
    #2 0x543a69 in serial_blosc /src/c-blosc2/blosc/blosc2.c:1135:18
    #3 0x543a69 in do_job /src/c-blosc2/blosc/blosc2.c:1317:15
    #4 0x54267a in blosc_compress_context /src/c-blosc2/blosc/blosc2.c:1723:15
    #5 0x5478b7 in blosc_compress /src/c-blosc2/blosc/blosc2.c:2024:12
    #6 0x4f920d in LLVMFuzzerTestOneInput /src/c-blosc2/tests/fuzz/fuzz_compress.c:41:7
    #7 0x4f97fe in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:217:5
    #8 0x4f97fe in main /src/libfuzzer/afl/afl_driver.cpp:254:12
    #9 0x7a091ffaf83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #10 0x44e658 in _start (/out/compress_fuzzer+0x44e658)

DEDUP_TOKEN: _sw32--blosc_c--serial_blosc
0x62100000611e is located 0 bytes to the right of 4126-byte region [0x621000005100,0x62100000611e)
allocated by thread T0 here:
    #0 0x4c695d in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:145:3
    #1 0x4f91e1 in LLVMFuzzerTestOneInput /src/c-blosc2/tests/fuzz/fuzz_compress.c:37:12
    #2 0x4f97fe in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:217:5
    #3 0x4f97fe in main /src/libfuzzer/afl/afl_driver.cpp:254:12
    #4 0x7a091ffaf83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: malloc--LLVMFuzzerTestOneInput--ExecuteFilesOnyByOne
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/c-blosc2/blosc/blosc-private.h:71:14 in _sw32
Shadow bytes around the buggy address:
  0x0c427fff8bd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c427fff8be0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c427fff8bf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c427fff8c00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c427fff8c10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c427fff8c20: 00 00 00[06]fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c427fff8c30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c427fff8c40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c427fff8c50: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c427fff8c60: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c427fff8c70: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING