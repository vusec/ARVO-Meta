Unable to find image 'n132/arvo:60983-vul' locally
60983-vul: Pulling from n132/arvo
e92ed755c008: Already exists
b9fd7cb1ff8f: Already exists
ee690f2d57a1: Already exists
53e3366ec435: Already exists
63e7c0e1f466: Already exists
a2db896529a8: Already exists
1aadbf2b743b: Already exists
c47cfe87133d: Already exists
d47d661e0346: Already exists
54f456767742: Already exists
50838dae68b0: Already exists
e3dcfa897fac: Already exists
a39a6f57d314: Already exists
8e5ad5f844bd: Already exists
acdc4754fb16: Already exists
561d38f2523f: Already exists
d89ccc9de79b: Already exists
d555683b6ceb: Already exists
77f0c8f46b99: Already exists
ff650ebce0c0: Already exists
82e53dcf5b25: Already exists
6cdc92e4034f: Already exists
5ac0b8588de6: Already exists
7ea325996a10: Already exists
556f03ecb1c8: Pulling fs layer
23c604a00d35: Pulling fs layer
2e376e74b944: Pulling fs layer
9b7f4a0f20ac: Pulling fs layer
c3731316110e: Pulling fs layer
4f4fb700ef54: Pulling fs layer
c1f2364b5e82: Pulling fs layer
db2cdb440694: Pulling fs layer
7de0dad4fe14: Pulling fs layer
cea1dc98764d: Pulling fs layer
84a76a4aaa9a: Pulling fs layer
9b38cb4a0fcc: Pulling fs layer
4f4fb700ef54: Waiting
c1f2364b5e82: Waiting
db2cdb440694: Waiting
7de0dad4fe14: Waiting
cea1dc98764d: Waiting
84a76a4aaa9a: Waiting
9b38cb4a0fcc: Waiting
9b7f4a0f20ac: Waiting
c3731316110e: Waiting
23c604a00d35: Verifying Checksum
23c604a00d35: Download complete
2e376e74b944: Verifying Checksum
2e376e74b944: Download complete
c3731316110e: Verifying Checksum
c3731316110e: Download complete
4f4fb700ef54: Download complete
9b7f4a0f20ac: Verifying Checksum
9b7f4a0f20ac: Download complete
c1f2364b5e82: Verifying Checksum
c1f2364b5e82: Download complete
556f03ecb1c8: Verifying Checksum
556f03ecb1c8: Download complete
db2cdb440694: Verifying Checksum
db2cdb440694: Download complete
cea1dc98764d: Verifying Checksum
cea1dc98764d: Download complete
9b38cb4a0fcc: Verifying Checksum
9b38cb4a0fcc: Download complete
7de0dad4fe14: Verifying Checksum
7de0dad4fe14: Download complete
84a76a4aaa9a: Verifying Checksum
84a76a4aaa9a: Download complete
556f03ecb1c8: Pull complete
23c604a00d35: Pull complete
2e376e74b944: Pull complete
9b7f4a0f20ac: Pull complete
c3731316110e: Pull complete
4f4fb700ef54: Pull complete
c1f2364b5e82: Pull complete
db2cdb440694: Pull complete
7de0dad4fe14: Pull complete
cea1dc98764d: Pull complete
84a76a4aaa9a: Pull complete
9b38cb4a0fcc: Pull complete
Digest: sha256:41b5721d25b46c256c7a2822153042b5d51c6225cd45c8458f4a1910aebe9bbc
Status: Downloaded newer image for n132/arvo:60983-vul
======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/libraw_raf_fuzzer < INPUT_FILE
or
  /out/libraw_raf_fuzzer INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/libraw_raf_fuzzer [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
=================================================================
==7==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x62e00000a800 at pc 0x00000049610f bp 0x7ffeb1a25c30 sp 0x7ffeb1a253f8
WRITE of size 61381 at 0x62e00000a800 thread T0
SCARINESS: 45 (multi-byte-write-heap-buffer-overflow)
    #0 0x49610e in __asan_memmove /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:30:3
    #1 0x4fcbce in LibRaw_buffer_datastream::read(void*, unsigned long, unsigned long) /src/libraw/src/libraw_datastream.cpp:367:3
    #2 0x4ef1d6 in LibRaw::read_shorts(unsigned short*, unsigned int) /src/libraw/src/utils/read_utils.cpp:145:17
    #3 0x54596c in LibRaw::sony_arq_load_raw() /src/libraw/src/decoders/decoders_libraw.cpp:20:3
    #4 0x4cb8ff in LibRaw::unpack() /src/libraw/src/decoders/unpack.cpp:287:7
    #5 0x4c8b65 in LLVMFuzzerTestOneInput /src/libraw_fuzzer.cc:47:20
    #6 0x4c910e in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:217:5
    #7 0x4c910e in main /src/libfuzzer/afl/afl_driver.cpp:254:12
    #8 0x7a65adaaa83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #9 0x41e4b8 in _start (/out/libraw_raf_fuzzer+0x41e4b8)

DEDUP_TOKEN: __asan_memmove--LibRaw_buffer_datastream::read(void*, unsigned long, unsigned long)--LibRaw::read_shorts(unsigned short*, unsigned int)
0x62e00000a800 is located 0 bytes to the right of 41984-byte region [0x62e000000400,0x62e00000a800)
allocated by thread T0 here:
    #0 0x49679d in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:145:3
    #1 0x4f477a in libraw_memmgr::malloc(unsigned long) /src/libraw/./libraw/libraw_alloc.h:49:17
    #2 0x4f3fe8 in LibRaw::malloc(unsigned long) /src/libraw/src/utils/utils_libraw.cpp:245:20
    #3 0x4cb4f0 in LibRaw::unpack() /src/libraw/src/decoders/unpack.cpp:237:37
    #4 0x4c8b65 in LLVMFuzzerTestOneInput /src/libraw_fuzzer.cc:47:20
    #5 0x4c910e in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:217:5
    #6 0x4c910e in main /src/libfuzzer/afl/afl_driver.cpp:254:12
    #7 0x7a65adaaa83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: malloc--libraw_memmgr::malloc(unsigned long)--LibRaw::malloc(unsigned long)
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:30:3 in __asan_memmove
Shadow bytes around the buggy address:
  0x0c5c7fff94b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c5c7fff94c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c5c7fff94d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c5c7fff94e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c5c7fff94f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c5c7fff9500:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c5c7fff9510: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c5c7fff9520: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c5c7fff9530: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c5c7fff9540: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c5c7fff9550: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==7==ABORTING
