INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 1622131812
INFO: Loaded 1 modules   (21783 inline 8-bit counters): 21783 [0x938cf0, 0x93e207), 
INFO: Loaded 1 PC tables (21783 PCs): 21783 [0x818f20,0x86e090), 
/out/libraw_nef_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
unknown file: data corrupted at 1505
=================================================================
==7==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x61f000000c34 at pc 0x0000005880f3 bp 0x7ffe2e0e9f30 sp 0x7ffe2e0e9f28
READ of size 2 at 0x61f000000c34 thread T0
SCARINESS: 14 (2-byte-read-heap-buffer-overflow)
    #0 0x5880f2 in LibRaw::raw2image() /src/libraw/src/preprocessing/raw2image.cpp:122:19
    #1 0x56dcbd in LLVMFuzzerTestOneInput /src/libraw_fuzzer.cc:77:20
    #2 0x43df33 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #3 0x429692 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #4 0x42ef3c in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #5 0x458472 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #6 0x72c0bcb60082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 87b331c034a6458c64ce09c03939e947212e18ce)
    #7 0x41f85d in _start (/out/libraw_nef_fuzzer+0x41f85d)

DEDUP_TOKEN: LibRaw::raw2image()--LLVMFuzzerTestOneInput--fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long)
0x61f000000c34 is located 0 bytes to the right of 2996-byte region [0x61f000000080,0x61f000000c34)
allocated by thread T0 here:
    #0 0x52f0c6 in __interceptor_malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:69:3
    #1 0x5a7dbd in malloc /src/libraw/./libraw/libraw_alloc.h:49:17
    #2 0x5a7dbd in LibRaw::malloc(unsigned long) /src/libraw/src/utils/utils_libraw.cpp:256:20
    #3 0x572b75 in LibRaw::unpack() /src/libraw/src/decoders/unpack.cpp:350:37
    #4 0x56dc5f in LLVMFuzzerTestOneInput /src/libraw_fuzzer.cc:67:20
    #5 0x43df33 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #6 0x429692 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #7 0x42ef3c in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #8 0x458472 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #9 0x72c0bcb60082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 87b331c034a6458c64ce09c03939e947212e18ce)

DEDUP_TOKEN: __interceptor_malloc--malloc--LibRaw::malloc(unsigned long)
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libraw/src/preprocessing/raw2image.cpp:122:19 in LibRaw::raw2image()
Shadow bytes around the buggy address:
  0x0c3e7fff8130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c3e7fff8140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c3e7fff8150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c3e7fff8160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c3e7fff8170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c3e7fff8180: 00 00 00 00 00 00[04]fa fa fa fa fa fa fa fa fa
  0x0c3e7fff8190: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c3e7fff81a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c3e7fff81b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c3e7fff81c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c3e7fff81d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==7==ABORTING
