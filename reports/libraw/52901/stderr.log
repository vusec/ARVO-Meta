INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 1622086802
INFO: Loaded 1 modules   (21783 inline 8-bit counters): 21783 [0x938cf0, 0x93e207), 
INFO: Loaded 1 PC tables (21783 PCs): 21783 [0x818f20,0x86e090), 
/out/libraw_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==7==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x62c0000074a0 at pc 0x00000052e912 bp 0x7ffed851b5d0 sp 0x7ffed851ada0
WRITE of size 888 at 0x62c0000074a0 thread T0
SCARINESS: 45 (multi-byte-write-heap-buffer-overflow)
    #0 0x52e911 in __asan_memmove /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:30:3
    #1 0x587a66 in LibRaw::raw2image() /src/libraw/src/preprocessing/raw2image.cpp:150:13
    #2 0x56dcbd in LLVMFuzzerTestOneInput /src/libraw_fuzzer.cc:77:20
    #3 0x43df33 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #4 0x429692 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #5 0x42ef3c in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #6 0x458472 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #7 0x7bc152420082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 87b331c034a6458c64ce09c03939e947212e18ce)
    #8 0x41f85d in _start (/out/libraw_fuzzer+0x41f85d)

DEDUP_TOKEN: __asan_memmove--LibRaw::raw2image()--LLVMFuzzerTestOneInput
0x62c0000074a0 is located 0 bytes to the right of 29344-byte region [0x62c000000200,0x62c0000074a0)
allocated by thread T0 here:
    #0 0x52f29e in __interceptor_calloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:77:3
    #1 0x5a8e1b in calloc /src/libraw/./libraw/libraw_alloc.h:56:17
    #2 0x5a8e1b in LibRaw::calloc(unsigned long, unsigned long) /src/libraw/src/utils/utils_libraw.cpp:271:20
    #3 0x586b04 in LibRaw::raw2image() /src/libraw/src/preprocessing/raw2image.cpp:85:25
    #4 0x56dcbd in LLVMFuzzerTestOneInput /src/libraw_fuzzer.cc:77:20
    #5 0x43df33 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #6 0x429692 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #7 0x42ef3c in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #8 0x458472 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #9 0x7bc152420082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 87b331c034a6458c64ce09c03939e947212e18ce)

DEDUP_TOKEN: __interceptor_calloc--calloc--LibRaw::calloc(unsigned long, unsigned long)
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:30:3 in __asan_memmove
Shadow bytes around the buggy address:
  0x0c587fff8e40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c587fff8e50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c587fff8e60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c587fff8e70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c587fff8e80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c587fff8e90: 00 00 00 00[fa]fa fa fa fa fa fa fa fa fa fa fa
  0x0c587fff8ea0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c587fff8eb0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c587fff8ec0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c587fff8ed0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c587fff8ee0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==7==ABORTING
