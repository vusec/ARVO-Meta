======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/ffmpeg_AV_CODEC_ID_JPEG2000_fuzzer < INPUT_FILE
or
  /out/ffmpeg_AV_CODEC_ID_JPEG2000_fuzzer INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/ffmpeg_AV_CODEC_ID_JPEG2000_fuzzer [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
=================================================================
==7==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60200000001a at pc 0x0000004f6228 bp 0x7ffc02925f70 sp 0x7ffc02925f68
READ of size 4 at 0x60200000001a thread T0
SCARINESS: 17 (4-byte-read-heap-buffer-overflow)
    #0 0x4f6227 in bytestream2_peek_be32 /src/ffmpeg/libavcodec/bytestream.h:92:1
    #1 0x4f6227 in jpeg2000_decode_packet /src/ffmpeg/libavcodec/jpeg2000dec.c:1287:82
    #2 0x4f0f80 in jpeg2000_decode_packets_po_iteration /src/ffmpeg/libavcodec/jpeg2000dec.c:1351:40
    #3 0x4f0a68 in jpeg2000_decode_packets /src/ffmpeg/libavcodec/jpeg2000dec.c:1612:15
    #4 0x4e761f in jpeg2000_read_bitstream_packets /src/ffmpeg/libavcodec/jpeg2000dec.c:2320:20
    #5 0x4e3df0 in jpeg2000_decode_frame /src/ffmpeg/libavcodec/jpeg2000dec.c:2537:15
    #6 0x4e07bc in decode_simple_internal /src/ffmpeg/libavcodec/decode.c:342:15
    #7 0x4e0471 in decode_simple_receive_frame /src/ffmpeg/libavcodec/decode.c:538:15
    #8 0x4d66de in decode_receive_frame_internal /src/ffmpeg/libavcodec/decode.c:556:15
    #9 0x4d650f in avcodec_send_packet /src/ffmpeg/libavcodec/decode.c:614:15
    #10 0x4d785f in compat_decode /src/ffmpeg/libavcodec/decode.c:749:15
    #11 0x4d7671 in avcodec_decode_video2 /src/ffmpeg/libavcodec/decode.c:810:12
    #12 0x4ce732 in LLVMFuzzerTestOneInput /src/ffmpeg/tools/target_dec_fuzzer.c:335:23
    #13 0x99d30e in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:217:5
    #14 0x99d30e in main /src/libfuzzer/afl/afl_driver.cpp:254:12
    #15 0x71e312a8583f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #16 0x41ef78 in _start (/out/ffmpeg_AV_CODEC_ID_JPEG2000_fuzzer+0x41ef78)

DEDUP_TOKEN: bytestream2_peek_be32--jpeg2000_decode_packet--jpeg2000_decode_packets_po_iteration
0x60200000001a is located 0 bytes to the right of 10-byte region [0x602000000010,0x60200000001a)
allocated by thread T0 here:
    #0 0x49a579 in realloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:164:3
    #1 0x94026a in av_realloc /src/ffmpeg/libavutil/mem.c:142:12
    #2 0x4edbf2 in get_ppm /src/ffmpeg/libavcodec/jpeg2000dec.c:948:11
    #3 0x4e6e33 in jpeg2000_read_main_headers /src/ffmpeg/libavcodec/jpeg2000dec.c:2279:19
    #4 0x4e3d16 in jpeg2000_decode_frame /src/ffmpeg/libavcodec/jpeg2000dec.c:2528:15
    #5 0x4e07bc in decode_simple_internal /src/ffmpeg/libavcodec/decode.c:342:15
    #6 0x4e0471 in decode_simple_receive_frame /src/ffmpeg/libavcodec/decode.c:538:15
    #7 0x4d66de in decode_receive_frame_internal /src/ffmpeg/libavcodec/decode.c:556:15
    #8 0x4d650f in avcodec_send_packet /src/ffmpeg/libavcodec/decode.c:614:15
    #9 0x4d785f in compat_decode /src/ffmpeg/libavcodec/decode.c:749:15
    #10 0x4d7671 in avcodec_decode_video2 /src/ffmpeg/libavcodec/decode.c:810:12
    #11 0x4ce732 in LLVMFuzzerTestOneInput /src/ffmpeg/tools/target_dec_fuzzer.c:335:23
    #12 0x99d30e in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:217:5
    #13 0x99d30e in main /src/libfuzzer/afl/afl_driver.cpp:254:12
    #14 0x71e312a8583f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: realloc--av_realloc--get_ppm
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/ffmpeg/libavcodec/bytestream.h:92:1 in bytestream2_peek_be32
Shadow bytes around the buggy address:
  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c047fff8000: fa fa 00[02]fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==7==ABORTING
