INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 1619983992
INFO: Loaded 1 modules   (49008 inline 8-bit counters): 49008 [0xdb81e0, 0xdc4150), 
INFO: Loaded 1 PC tables (49008 PCs): 49008 [0xbe2a28,0xca2128), 
/out/ffmpeg_AV_CODEC_ID_XMA2_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==7==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60e000000948 at pc 0x0000005e323b bp 0x7ffc5986cd70 sp 0x7ffc5986cd68
READ of size 8 at 0x60e000000948 thread T0
SCARINESS: 23 (8-byte-read-heap-buffer-overflow)
    #0 0x5e323a in xma_decode_packet /src/ffmpeg/libavcodec/wmaprodec.c:1916:36
    #1 0x599df3 in decode_simple_internal /src/ffmpeg/libavcodec/decode.c:326:15
    #2 0x599704 in decode_simple_receive_frame /src/ffmpeg/libavcodec/decode.c:517:15
    #3 0x58ef87 in decode_receive_frame_internal /src/ffmpeg/libavcodec/decode.c:537:15
    #4 0x58ed92 in avcodec_send_packet /src/ffmpeg/libavcodec/decode.c:604:15
    #5 0x57e649 in LLVMFuzzerTestOneInput /src/ffmpeg/tools/target_dec_fuzzer.c:438:9
    #6 0x47f943 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/out/ffmpeg_AV_CODEC_ID_XMA2_fuzzer+0x47f943)
    #7 0x46b0b2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:323:6
    #8 0x470d7e in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/out/ffmpeg_AV_CODEC_ID_XMA2_fuzzer+0x470d7e)
    #9 0x49a652 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #10 0x799c5b4ec082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)
    #11 0x44635d in _start (/out/ffmpeg_AV_CODEC_ID_XMA2_fuzzer+0x44635d)

DEDUP_TOKEN: xma_decode_packet--decode_simple_internal--decode_simple_receive_frame
0x60e000000948 is located 0 bytes to the right of 72-byte region [0x60e000000900,0x60e000000948)
allocated by thread T0 here:
    #0 0x549287 in posix_memalign /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:226:3
    #1 0xa35fc5 in av_malloc /src/ffmpeg/libavutil/mem.c:104:9
    #2 0xa36889 in av_mallocz /src/ffmpeg/libavutil/mem.c:263:17
    #3 0xa367fb in av_mallocz_array /src/ffmpeg/libavutil/mem.c:219:12
    #4 0x59555f in audio_get_buffer /src/ffmpeg/libavcodec/decode.c:1369:32
    #5 0x593caf in avcodec_default_get_buffer2 /src/ffmpeg/libavcodec/decode.c:1467:16
    #6 0x5975f8 in ff_get_buffer /src/ffmpeg/libavcodec/decode.c:1692:11
    #7 0x5e2a2b in xma_decode_packet /src/ffmpeg/libavcodec/wmaprodec.c:1910:25
    #8 0x599df3 in decode_simple_internal /src/ffmpeg/libavcodec/decode.c:326:15
    #9 0x599704 in decode_simple_receive_frame /src/ffmpeg/libavcodec/decode.c:517:15
    #10 0x58ef87 in decode_receive_frame_internal /src/ffmpeg/libavcodec/decode.c:537:15
    #11 0x58ed92 in avcodec_send_packet /src/ffmpeg/libavcodec/decode.c:604:15
    #12 0x57e649 in LLVMFuzzerTestOneInput /src/ffmpeg/tools/target_dec_fuzzer.c:438:9
    #13 0x47f943 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/out/ffmpeg_AV_CODEC_ID_XMA2_fuzzer+0x47f943)
    #14 0x46b0b2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:323:6
    #15 0x470d7e in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/out/ffmpeg_AV_CODEC_ID_XMA2_fuzzer+0x470d7e)
    #16 0x49a652 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #17 0x799c5b4ec082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)

DEDUP_TOKEN: posix_memalign--av_malloc--av_mallocz
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/ffmpeg/libavcodec/wmaprodec.c:1916:36 in xma_decode_packet
Shadow bytes around the buggy address:
  0x0c1c7fff80d0: 00 00 00 00 fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1c7fff80e0: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00
  0x0c1c7fff80f0: 00 fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1c7fff8100: 00 00 00 00 00 00 00 00 00 00 00 00 fa fa fa fa
  0x0c1c7fff8110: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
=>0x0c1c7fff8120: 00 00 00 00 00 00 00 00 00[fa]fa fa fa fa fa fa
  0x0c1c7fff8130: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1c7fff8140: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1c7fff8150: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1c7fff8160: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1c7fff8170: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==7==ABORTING
