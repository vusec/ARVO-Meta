=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x621000003900 at pc 0x00000049d2a2 bp 0x7ffedd1e5060 sp 0x7ffedd1e4828
WRITE of size 6167 at 0x621000003900 thread T0
SCARINESS: 45 (multi-byte-write-heap-buffer-overflow)
    #0 0x49d2a1 in __asan_memmove /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:30:3
    #1 0x536a28 in LibRaw_buffer_datastream::read(void*, unsigned long, unsigned long) /src/libraw/src/libraw_datastream.cpp:372:3
    #2 0x73eb03 in LibRaw::uncompressed_fp_dng_load_raw() /src/libraw/src/decoders/fp_dng.cpp:638:59
    #3 0x4de438 in LibRaw::unpack() /src/libraw/src/decoders/unpack.cpp:400:7
    #4 0x4da87f in LLVMFuzzerTestOneInput /src/libraw_fuzzer.cc:66:20
    #5 0x4dce0a in ExecuteFilesOnyByOne /src/aflplusplus/utils/aflpp_driver/aflpp_driver.c:234:7
    #6 0x4dcbdd in main /src/aflplusplus/utils/aflpp_driver/aflpp_driver.c:318:12
    #7 0x70aa48c1c082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)
    #8 0x41e6bd in _start (/out/libraw_raf_fuzzer+0x41e6bd)

DEDUP_TOKEN: __asan_memmove--LibRaw_buffer_datastream::read(void*, unsigned long, unsigned long)--LibRaw::uncompressed_fp_dng_load_raw()
0x621000003900 is located 0 bytes to the right of 4096-byte region [0x621000002900,0x621000003900)
allocated by thread T0 here:
    #0 0x4d479d in operator new(unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:95:3
    #1 0x73e3b9 in void* std::__1::__libcpp_operator_new<unsigned long>(unsigned long) /usr/local/bin/../include/c++/v1/new:245:10
    #2 0x73e3b9 in std::__1::__libcpp_allocate(unsigned long, unsigned long) /usr/local/bin/../include/c++/v1/new:271:10
    #3 0x73e3b9 in std::__1::allocator<unsigned char>::allocate(unsigned long) /usr/local/bin/../include/c++/v1/__memory/allocator.h:105:38
    #4 0x73e3b9 in std::__1::allocator_traits<std::__1::allocator<unsigned char> >::allocate(std::__1::allocator<unsigned char>&, unsigned long) /usr/local/bin/../include/c++/v1/__memory/allocator_traits.h:262:20
    #5 0x73e3b9 in std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__vallocate(unsigned long) /usr/local/bin/../include/c++/v1/vector:1000:37
    #6 0x73e3b9 in std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::vector(unsigned long) /usr/local/bin/../include/c++/v1/vector:1133:9
    #7 0x73e3b9 in LibRaw::uncompressed_fp_dng_load_raw() /src/libraw/src/decoders/fp_dng.cpp:619:24
    #8 0x4de438 in LibRaw::unpack() /src/libraw/src/decoders/unpack.cpp:400:7
    #9 0x4da87f in LLVMFuzzerTestOneInput /src/libraw_fuzzer.cc:66:20
    #10 0x4dce0a in ExecuteFilesOnyByOne /src/aflplusplus/utils/aflpp_driver/aflpp_driver.c:234:7

DEDUP_TOKEN: operator new(unsigned long)--void* std::__1::__libcpp_operator_new<unsigned long>(unsigned long)--std::__1::__libcpp_allocate(unsigned long, unsigned long)
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:30:3 in __asan_memmove
Shadow bytes around the buggy address:
  0x0c427fff86d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c427fff86e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c427fff86f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c427fff8700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c427fff8710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c427fff8720:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c427fff8730: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c427fff8740: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c427fff8750: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c427fff8760: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c427fff8770: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING