INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 3284740588
INFO: Loaded 1 modules   (31896 inline 8-bit counters): 31896 [0x565f9b5801e8, 0x565f9b587e80),
INFO: Loaded 1 PC tables (31896 PCs): 31896 [0x565f9b587e80,0x565f9b604800),
/out/djxl_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6060000002a8 at pc 0x565f9ad30fea bp 0x7ffc7ffa67d0 sp 0x7ffc7ffa5f98
WRITE of size 1 at 0x6060000002a8 thread T0
SCARINESS: 41 (1-byte-write-heap-buffer-overflow-far-from-bounds)
    #0 0x565f9ad30fe9 in __asan_memcpy /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:22:3
    #1 0x565f9ae92db4 in jxl::JxlBoxContentDecoder::Process(unsigned char const*, unsigned long, unsigned long, unsigned char**, unsigned long*) /src/libjxl/lib/jxl/box_content_decoder.cc:87:5
    #2 0x565f9ad7cb1e in JxlDecoderProcessInput /src/libjxl/lib/jxl/decode.cc:1634:63
    #3 0x565f9ad6b95e in DecodeJpegXl /src/libjxl/tools/djxl_fuzzer.cc:176:31
    #4 0x565f9ad6b95e in TestOneInput /src/libjxl/tools/djxl_fuzzer.cc:527:3
    #5 0x565f9ad6b95e in LLVMFuzzerTestOneInput /src/libjxl/tools/djxl_fuzzer.cc:537:10
    #6 0x565f9ac63a13 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) cxa_noexception.cpp
    #7 0x565f9ac4f2c2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #8 0x565f9ac54d75 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) cxa_noexception.cpp
    #9 0x565f9ac7da72 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #10 0x7f690cdf9082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)
    #11 0x565f9ac2c55d in _start (/out/djxl_fuzzer+0x12055d)

DEDUP_TOKEN: __asan_memcpy--jxl::JxlBoxContentDecoder::Process(unsigned char const*, unsigned long, unsigned long, unsigned char**, unsigned long*)--JxlDecoderProcessInput
0x6060000002a8 is located 8 bytes to the right of 64-byte region [0x606000000260,0x6060000002a0)
allocated by thread T0 here:
    #0 0x565f9ad6828d in operator new(unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:95:3
    #1 0x565f9ad74893 in __libcpp_operator_new<unsigned long> /usr/local/bin/../include/c++/v1/new:235:10
    #2 0x565f9ad74893 in __libcpp_allocate /usr/local/bin/../include/c++/v1/new:261:10
    #3 0x565f9ad74893 in allocate /usr/local/bin/../include/c++/v1/__memory/allocator.h:106:38
    #4 0x565f9ad74893 in allocate /usr/local/bin/../include/c++/v1/__memory/allocator_traits.h:262:20
    #5 0x565f9ad74893 in __split_buffer /usr/local/bin/../include/c++/v1/__split_buffer:306:29
    #6 0x565f9ad74893 in std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__append(unsigned long) /usr/local/bin/../include/c++/v1/vector:1100:53
    #7 0x565f9ad7c9e4 in resize /usr/local/bin/../include/c++/v1/vector:2031:15
    #8 0x565f9ad7c9e4 in JxlDecoderProcessInput /src/libjxl/lib/jxl/decode.cc:1630:42
    #9 0x565f9ad6b95e in DecodeJpegXl /src/libjxl/tools/djxl_fuzzer.cc:176:31
    #10 0x565f9ad6b95e in TestOneInput /src/libjxl/tools/djxl_fuzzer.cc:527:3
    #11 0x565f9ad6b95e in LLVMFuzzerTestOneInput /src/libjxl/tools/djxl_fuzzer.cc:537:10
    #12 0x565f9ac63a13 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) cxa_noexception.cpp
    #13 0x565f9ac4f2c2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #14 0x565f9ac54d75 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) cxa_noexception.cpp
    #15 0x565f9ac7da72 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #16 0x7f690cdf9082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)

DEDUP_TOKEN: operator new(unsigned long)--__libcpp_operator_new<unsigned long>--__libcpp_allocate
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:22:3 in __asan_memcpy
Shadow bytes around the buggy address:
  0x0c0c7fff8000: fa fa fa fa fd fd fd fd fd fd fd fa fa fa fa fa
  0x0c0c7fff8010: 00 00 00 00 00 00 03 fa fa fa fa fa fd fd fd fd
  0x0c0c7fff8020: fd fd fd fd fa fa fa fa fd fd fd fd fd fd fd fd
  0x0c0c7fff8030: fa fa fa fa fd fd fd fd fd fd fd fd fa fa fa fa
  0x0c0c7fff8040: fd fd fd fd fd fd fd fd fa fa fa fa 00 00 00 00
=>0x0c0c7fff8050: 00 00 00 00 fa[fa]fa fa fa fa fa fa fa fa fa fa
  0x0c0c7fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c0c7fff8070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c0c7fff8080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c0c7fff8090: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c0c7fff80a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING