======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/coder_MVG_fuzzer < INPUT_FILE
or
  /out/coder_MVG_fuzzer INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/coder_MVG_fuzzer [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
attribute not recognized: w
=================================================================
==7==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6140000001e8 at pc 0x0000006d8083 bp 0x7fffb147bca0 sp 0x7fffb147bc98
WRITE of size 4 at 0x6140000001e8 thread T0
SCARINESS: 46 (4-byte-write-heap-buffer-overflow-far-from-bounds)
    #0 0x6d8082 in ConvertPrimitiveToPath /src/graphicsmagick/magick/render.c:942:22
    #1 0x6d50cb in DrawPolygonPrimitive /src/graphicsmagick/magick/render.c:4761:20
    #2 0x6d3a25 in DrawPrimitive /src/graphicsmagick/magick/render.c
    #3 0x6c45dc in DrawImage /src/graphicsmagick/magick/render.c:4373:13
    #4 0x7fcfc2 in ReadMVGImage /src/graphicsmagick/coders/mvg.c:224:10
    #5 0x5ca17d in ReadImage /src/graphicsmagick/magick/constitute.c:1607:13
    #6 0x583445 in BlobToImage /src/graphicsmagick/magick/blob.c:764:13
    #7 0x5371de in Magick::Image::read(Magick::Blob const&) /src/graphicsmagick/Magick++/lib/Image.cpp:1591:5
    #8 0x52ea83 in LLVMFuzzerTestOneInput /src/graphicsmagick/fuzzing/coder_fuzzer.cc:20:15
    #9 0x52f3bf in ExecuteFilesOnyByOne(int, char**) /src/libfuzzer/afl/afl_driver.cpp:301:5
    #10 0x52f96e in main /src/libfuzzer/afl/afl_driver.cpp:339:12
    #11 0x72a121ef983f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #12 0x41ddc8 in _start (/out/coder_MVG_fuzzer+0x41ddc8)

DEDUP_TOKEN: ConvertPrimitiveToPath--DrawPolygonPrimitive--DrawPrimitive
0x6140000001e8 is located 16 bytes to the right of 408-byte region [0x614000000040,0x6140000001d8)
allocated by thread T0 here:
    #0 0x4ebc57 in malloc /src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:121
    #1 0x6d7afd in ConvertPrimitiveToPath /src/graphicsmagick/magick/render.c:881:13
    #2 0x6d50cb in DrawPolygonPrimitive /src/graphicsmagick/magick/render.c:4761:20
    #3 0x6d3a25 in DrawPrimitive /src/graphicsmagick/magick/render.c
    #4 0x6c45dc in DrawImage /src/graphicsmagick/magick/render.c:4373:13
    #5 0x7fcfc2 in ReadMVGImage /src/graphicsmagick/coders/mvg.c:224:10
    #6 0x5ca17d in ReadImage /src/graphicsmagick/magick/constitute.c:1607:13
    #7 0x583445 in BlobToImage /src/graphicsmagick/magick/blob.c:764:13
    #8 0x5371de in Magick::Image::read(Magick::Blob const&) /src/graphicsmagick/Magick++/lib/Image.cpp:1591:5
    #9 0x52ea83 in LLVMFuzzerTestOneInput /src/graphicsmagick/fuzzing/coder_fuzzer.cc:20:15
    #10 0x52f3bf in ExecuteFilesOnyByOne(int, char**) /src/libfuzzer/afl/afl_driver.cpp:301:5
    #11 0x52f96e in main /src/libfuzzer/afl/afl_driver.cpp:339:12
    #12 0x72a121ef983f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: malloc--ConvertPrimitiveToPath--DrawPolygonPrimitive
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/graphicsmagick/magick/render.c:942:22 in ConvertPrimitiveToPath
Shadow bytes around the buggy address:
  0x0c287fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c287fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c287fff8000: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00
  0x0c287fff8010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c287fff8020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c287fff8030: 00 00 00 00 00 00 00 00 00 00 00 fa fa[fa]fa fa
  0x0c287fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c287fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c287fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c287fff8070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c287fff8080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==7==ABORTING
