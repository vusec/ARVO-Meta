INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 3278297838
INFO: Loaded 1 modules   (40785 inline 8-bit counters): 40785 [0x873e120, 0x8748071),
INFO: Loaded 1 PC tables (40785 PCs): 40785 [0x86a0964,0x86f03ec),
/out/decompress_frame_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0xf2503387 at pc 0x08242228 bp 0xffda46e8 sp 0xffda46e0
READ of size 4 at 0xf2503387 thread T0
SCARINESS: 27 (4-byte-read-heap-buffer-overflow-far-from-bounds)
    #0 0x8242227 in sw32_ /src/c-blosc2/blosc/blosc-private.h:44:13
    #1 0x8242227 in frame_get_lazychunk /src/c-blosc2/blosc/frame.c:1785:24
    #2 0x824895e in frame_decompress_chunk /src/c-blosc2/blosc/frame.c:2472:20
    #3 0x822fb4d in blosc2_schunk_decompress_chunk /src/c-blosc2/blosc/schunk.c:710:17
    #4 0x81a9466 in LLVMFuzzerTestOneInput /src/c-blosc2/tests/fuzz/fuzz_decompress_frame.c:38:15
    #5 0x80a37c1 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned int) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:599:15
    #6 0x80a4438 in fuzzer::Fuzzer::TryDetectingAMemoryLeak(unsigned char const*, unsigned int, bool) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:675:3
    #7 0x808dda8 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned int) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:328:8
    #8 0x8093c84 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned int)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:856:9
    #9 0x80bd467 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #10 0xf516f646 in __libc_start_main (/lib32/libc.so.6+0x18646)
    #11 0x8068208 in _start (/out/decompress_frame_fuzzer+0x8068208)

DEDUP_TOKEN: sw32_--frame_get_lazychunk--frame_decompress_chunk
0xf2503387 is located 201 bytes to the right of 158-byte region [0xf2503220,0xf25032be)
allocated by thread T0 here:
    #0 0x8171c35 in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:145:3
    #1 0x8082514 in operator new(unsigned int) (/out/decompress_frame_fuzzer+0x8082514)
    #2 0x80a4438 in fuzzer::Fuzzer::TryDetectingAMemoryLeak(unsigned char const*, unsigned int, bool) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:675:3
    #3 0x808dda8 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned int) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:328:8
    #4 0x8093c84 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned int)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:856:9
    #5 0x80bd467 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #6 0xf516f646 in __libc_start_main (/lib32/libc.so.6+0x18646)

DEDUP_TOKEN: malloc--operator new(unsigned int)--fuzzer::Fuzzer::TryDetectingAMemoryLeak(unsigned char const*, unsigned int, bool)
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/c-blosc2/blosc/blosc-private.h:44:13 in sw32_
Shadow bytes around the buggy address:
  0x3e4a0620: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00
  0x3e4a0630: 00 00 00 00 00 00 00 00 00 00 00 fa fa fa fa fa
  0x3e4a0640: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00
  0x3e4a0650: 00 00 00 00 00 00 00 06 fa fa fa fa fa fa fa fa
  0x3e4a0660: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
=>0x3e4a0670:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3e4a0680: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3e4a0690: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00
  0x3e4a06a0: 00 00 00 00 00 00 00 00 00 00 00 06 fa fa fa fa
  0x3e4a06b0: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00
  0x3e4a06c0: 00 00 00 00 00 00 00 04 fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING