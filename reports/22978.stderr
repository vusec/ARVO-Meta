INFO: Seed: 1933368249
INFO: Loaded 1 modules   (17425 inline 8-bit counters): 17425 [0xae6768, 0xaeab79), 
INFO: Loaded 1 PC tables (17425 PCs): 17425 [0x7c4b58,0x808c68), 
/out/libraw_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==7==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fe956dcd8a0 at pc 0x000000586165 bp 0x7ffe42eaafd0 sp 0x7ffe42eaafc8
WRITE of size 1 at 0x7fe956dcd8a0 thread T0
SCARINESS: 46 (1-byte-write-stack-buffer-overflow)
    #0 0x586164 in LibRaw_buffer_datastream::gets(char*, int) /src/libraw/src/libraw_datastream.cpp:436:16
    #1 0x65f9b4 in LibRaw::parse_rollei() /src/libraw/src/metadata/misc_parsers.cpp:302:10
    #2 0x640fb4 in LibRaw::identify() /src/libraw/src/metadata/identify.cpp:654:5
    #3 0x56f312 in LibRaw::open_datastream(LibRaw_abstract_datastream*) /src/libraw/src/utils/open.cpp:390:4
    #4 0x56e41a in LibRaw::open_buffer(void*, unsigned long) /src/libraw/src/utils/open.cpp:153:13
    #5 0x550233 in LLVMFuzzerTestOneInput /src/libraw_fuzzer.cc:31:24
    #6 0x459571 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:558:15
    #7 0x444cf2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:296:6
    #8 0x44ad4e in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:796:9
    #9 0x4726c2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:19:10
    #10 0x7fe955d5d83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #11 0x41f388 in _start (/out/libraw_fuzzer+0x41f388)

DEDUP_TOKEN: LibRaw_buffer_datastream::gets(char*, int)--LibRaw::parse_rollei()--LibRaw::identify()
Address 0x7fe956dcd8a0 is located in stack of thread T0 at offset 160 in frame
    #0 0x65f6cf in LibRaw::parse_rollei() /src/libraw/src/metadata/misc_parsers.cpp:293

DEDUP_TOKEN: LibRaw::parse_rollei()
  This frame has 2 object(s):
    [32, 160) 'line' (line 294) <== Memory access at offset 160 overflows this variable
    [192, 248) 't' (line 295)
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /src/libraw/src/libraw_datastream.cpp:436:16 in LibRaw_buffer_datastream::gets(char*, int)
Shadow bytes around the buggy address:
  0x0ffdaadb1ac0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ffdaadb1ad0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ffdaadb1ae0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ffdaadb1af0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ffdaadb1b00: f1 f1 f1 f1 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0ffdaadb1b10: 00 00 00 00[f2]f2 f2 f2 00 00 00 00 00 00 00 f3
  0x0ffdaadb1b20: f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ffdaadb1b30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ffdaadb1b40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ffdaadb1b50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ffdaadb1b60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==7==ABORTING
