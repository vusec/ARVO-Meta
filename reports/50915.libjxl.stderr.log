Accepting input from '/tmp/poc'
Usage for fuzzing: honggfuzz -P [flags] -- /out/djxl_fuzzer
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x62000004e000 at pc 0x558b548d1151 bp 0x7ffc1dfd5440 sp 0x7ffc1dfd4c08
READ of size 16 at 0x62000004e000 thread T0
SCARINESS: 26 (multi-byte-read-heap-buffer-overflow)
    #0 0x558b548d1150 in __asan_memcpy /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:22:3
    #1 0x558b54cd10ba in jxl::N_SSE4::BlendingStage::ProcessPaddingRow(std::__1::vector<std::__1::vector<float*, std::__1::allocator<float*> >, std::__1::allocator<std::__1::vector<float*, std::__1::allocator<float*> > > > const&, unsigned long, unsigned long, unsigned long) const /src/libjxl/lib/jxl/render_pipeline/stage_blending.cc:190:9
    #2 0x558b54cc4371 in jxl::LowMemoryRenderPipeline::RenderPadding(unsigned long, jxl::RectT<unsigned long>) /src/libjxl/lib/jxl/render_pipeline/low_memory_render_pipeline.cc:757:42
    #3 0x558b54cc5147 in jxl::LowMemoryRenderPipeline::ProcessBuffers(unsigned long, unsigned long) /src/libjxl/lib/jxl/render_pipeline/low_memory_render_pipeline.cc:806:9
    #4 0x558b54be3248 in operator() /src/libjxl/lib/jxl/dec_modular.cc:652:3
    #5 0x558b54be3248 in jxl::ThreadPool::RunCallState<jxl::ModularFrameDecoder::FinalizeDecoding(jxl::PassesDecoderState*, jxl::ThreadPool*, jxl::ImageBundle*, bool)::$_4, jxl::ModularFrameDecoder::FinalizeDecoding(jxl::PassesDecoderState*, jxl::ThreadPool*, jxl::ImageBundle*, bool)::$_5>::CallDataFunc(void*, unsigned int, unsigned long) /src/libjxl/lib/jxl/base/data_parallel.h:81:14
    #6 0x558b54a4b751 in jxl::ThreadPool::SequentialRunnerStatic(void*, void*, int (*)(void*, unsigned long), void (*)(void*, unsigned int, unsigned long), unsigned int, unsigned int) /src/libjxl/lib/jxl/base/data_parallel.cc:18:5
    #7 0x558b54bde135 in Run<(lambda at /src/libjxl/lib/jxl/dec_modular.cc:652:3), (lambda at /src/libjxl/lib/jxl/dec_modular.cc:652:3)> /src/libjxl/lib/jxl/base/data_parallel.h:50:12
    #8 0x558b54bde135 in RunOnPool<(lambda at /src/libjxl/lib/jxl/dec_modular.cc:652:3), (lambda at /src/libjxl/lib/jxl/dec_modular.cc:652:3)> /src/libjxl/lib/jxl/base/data_parallel.h:106:25
    #9 0x558b54bde135 in jxl::ModularFrameDecoder::FinalizeDecoding(jxl::PassesDecoderState*, jxl::ThreadPool*, jxl::ImageBundle*, bool) /src/libjxl/lib/jxl/dec_modular.cc:652:3
    #10 0x558b54a93b69 in jxl::FrameDecoder::Flush() /src/libjxl/lib/jxl/dec_frame.cc:882:3
    #11 0x558b54a8a5a7 in jxl::FrameDecoder::FinalizeFrame() /src/libjxl/lib/jxl/dec_frame.cc:967:3
    #12 0x558b5493198e in JxlDecoderProcessCodestream /src/libjxl/lib/jxl/decode.cc:1514:28
    #13 0x558b5493198e in HandleBoxes(JxlDecoderStruct*) /src/libjxl/lib/jxl/decode.cc:1973:33
    #14 0x558b54928d1f in JxlDecoderProcessInput /src/libjxl/lib/jxl/decode.cc:2119:29
    #15 0x558b5490c867 in DecodeJpegXl /src/libjxl/tools/djxl_fuzzer.cc:178:31
    #16 0x558b5490c867 in TestOneInput /src/libjxl/tools/djxl_fuzzer.cc:559:3
    #17 0x558b5490c867 in LLVMFuzzerTestOneInput /src/libjxl/tools/djxl_fuzzer.cc:569:10
    #18 0x558b54918bcb in main (/out/djxl_fuzzer+0x11cbcb)
    #19 0x72b09410a082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)
    #20 0x558b54852a2d in _start (/out/djxl_fuzzer+0x56a2d)

DEDUP_TOKEN: __asan_memcpy--jxl::N_SSE4::BlendingStage::ProcessPaddingRow(std::__1::vector<std::__1::vector<float*, std::__1::allocator<float*> >, std::__1::allocator<std::__1::vector<float*, std::__1::allocator<float*> > > > const&, unsigned long, unsigned long, unsigned long) const--jxl::LowMemoryRenderPipeline::RenderPadding(unsigned long, jxl::RectT<unsigned long>)
0x62000004e000 is located 0 bytes to the right of 3968-byte region [0x62000004d080,0x62000004e000)
allocated by thread T0 here:
    #0 0x558b548d1d2d in __interceptor_malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:129:3
    #1 0x558b54a4b2c0 in jxl::CacheAligned::Allocate(unsigned long, unsigned long) /src/libjxl/lib/jxl/base/cache_aligned.cc:87:21
    #2 0x558b5497d32c in Allocate /src/libjxl/lib/jxl/base/cache_aligned.h:43:12
    #3 0x558b5497d32c in AllocateArray /src/libjxl/lib/jxl/base/cache_aligned.h:61:29
    #4 0x558b5497d32c in jxl::PlaneBase::PlaneBase(unsigned long, unsigned long, unsigned long) /src/libjxl/lib/jxl/image.cc:93:14
    #5 0x558b54d55832 in Plane /src/libjxl/lib/jxl/image.h:150:9
    #6 0x558b54d55832 in construct<jxl::Plane<float>, const unsigned long &, const unsigned long &> /usr/local/bin/../include/c++/v1/__memory/allocator.h:151:28
    #7 0x558b54d55832 in construct<jxl::Plane<float>, const unsigned long &, const unsigned long &, void> /usr/local/bin/../include/c++/v1/__memory/allocator_traits.h:290:13
    #8 0x558b54d55832 in void std::__1::vector<jxl::Plane<float>, std::__1::allocator<jxl::Plane<float> > >::__emplace_back_slow_path<unsigned long const&, unsigned long const&>(unsigned long const&, unsigned long const&) /usr/local/bin/../include/c++/v1/vector:1676:5
    #9 0x558b54d55224 in emplace_back<const unsigned long &, const unsigned long &> /usr/local/bin/../include/c++/v1/vector:1696:9
    #10 0x558b54d55224 in jxl::(anonymous namespace)::WriteToImageBundleStage::SetInputSizes(std::__1::vector<std::__1::pair<unsigned long, unsigned long>, std::__1::allocator<std::__1::pair<unsigned long, unsigned long> > > const&) /src/libjxl/lib/jxl/render_pipeline/stage_write.cc:200:39
    #11 0x558b54cb97a0 in jxl::LowMemoryRenderPipeline::Init() /src/libjxl/lib/jxl/render_pipeline/low_memory_render_pipeline.cc:285:17
    #12 0x558b54c4f627 in jxl::RenderPipeline::Builder::Finalize(jxl::FrameDimensions) && /src/libjxl/lib/jxl/render_pipeline/render_pipeline.cc:91:8
    #13 0x558b54cb3efd in jxl::PassesDecoderState::PreparePipeline(jxl::ImageBundle*, jxl::PassesDecoderState::PipelineOptions) /src/libjxl/lib/jxl/dec_cache.cc:231:40
    #14 0x558b54a8818b in jxl::FrameDecoder::ProcessSections(jxl::FrameDecoder::SectionInfo const*, unsigned long, jxl::FrameDecoder::SectionStatus*) /src/libjxl/lib/jxl/dec_frame.cc:752:5
    #15 0x558b54930ae5 in JxlDecoderProcessSections /src/libjxl/lib/jxl/decode.cc:1143:40
    #16 0x558b54930ae5 in JxlDecoderProcessCodestream /src/libjxl/lib/jxl/decode.cc:1472:7
    #17 0x558b54930ae5 in HandleBoxes(JxlDecoderStruct*) /src/libjxl/lib/jxl/decode.cc:1973:33
    #18 0x558b54928d1f in JxlDecoderProcessInput /src/libjxl/lib/jxl/decode.cc:2119:29
    #19 0x558b5490c867 in DecodeJpegXl /src/libjxl/tools/djxl_fuzzer.cc:178:31
    #20 0x558b5490c867 in TestOneInput /src/libjxl/tools/djxl_fuzzer.cc:559:3
    #21 0x558b5490c867 in LLVMFuzzerTestOneInput /src/libjxl/tools/djxl_fuzzer.cc:569:10
    #22 0x558b54918bcb in main (/out/djxl_fuzzer+0x11cbcb)

DEDUP_TOKEN: __interceptor_malloc--jxl::CacheAligned::Allocate(unsigned long, unsigned long)--Allocate
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:22:3 in __asan_memcpy
Shadow bytes around the buggy address:
  0x0c4080001bb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c4080001bc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c4080001bd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c4080001be0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c4080001bf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c4080001c00:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c4080001c10: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0c4080001c20: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0c4080001c30: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0c4080001c40: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0c4080001c50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING