INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 3291419976
INFO: Loaded 1 modules   (25653 inline 8-bit counters): 25653 [0x5dce8327e338, 0x5dce8328476d),
INFO: Loaded 1 PC tables (25653 PCs): 25653 [0x5dce83284770,0x5dce832e8ac0),
/out/djxl_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x7a6a803ff780 at pc 0x5dce82cfbf7a bp 0x7ffe3ea6fc20 sp 0x7ffe3ea6f3e8
WRITE of size 144 at 0x7a6a803ff780 thread T0
SCARINESS: 45 (multi-byte-write-heap-buffer-overflow)
    #0 0x5dce82cfbf79 in __asan_memcpy /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:22:3
    #1 0x5dce8310e517 in jxl::(anonymous namespace)::WriteToImageBundleStage::ProcessRow(std::__1::vector<std::__1::vector<float*, std::__1::allocator<float*> >, std::__1::allocator<std::__1::vector<float*, std::__1::allocator<float*> > > > const&, std::__1::vector<std::__1::vector<float*, std::__1::allocator<float*> >, std::__1::allocator<std::__1::vector<float*, std::__1::allocator<float*> > > > const&, unsigned long, unsigned long, unsigned long, unsigned long, float*) const /src/libjxl/lib/jxl/render_pipeline/stage_write.cc:208:7
    #2 0x5dce830c00dc in jxl::LowMemoryRenderPipeline::RenderPadding(unsigned long, jxl::RectT<unsigned long>) /src/libjxl/lib/jxl/render_pipeline/low_memory_render_pipeline.cc:704:19
    #3 0x5dce830c0d04 in jxl::LowMemoryRenderPipeline::ProcessBuffers(unsigned long, unsigned long) /src/libjxl/lib/jxl/render_pipeline/low_memory_render_pipeline.cc:742:7
    #4 0x5dce82fec660 in operator() /src/libjxl/lib/jxl/dec_modular.cc:648:3
    #5 0x5dce82fec660 in jxl::ThreadPool::RunCallState<jxl::ModularFrameDecoder::FinalizeDecoding(jxl::PassesDecoderState*, jxl::ThreadPool*, jxl::ImageBundle*, bool)::$_4, jxl::ModularFrameDecoder::FinalizeDecoding(jxl::PassesDecoderState*, jxl::ThreadPool*, jxl::ImageBundle*, bool)::$_5>::CallDataFunc(void*, unsigned int, unsigned long) /src/libjxl/lib/jxl/base/data_parallel.h:81:14
    #6 0x5dce82e64451 in jxl::ThreadPool::SequentialRunnerStatic(void*, void*, int (*)(void*, unsigned long), void (*)(void*, unsigned int, unsigned long), unsigned int, unsigned int) /src/libjxl/lib/jxl/base/data_parallel.cc:18:5
    #7 0x5dce82fe796d in Run<(lambda at /src/libjxl/lib/jxl/dec_modular.cc:648:3), (lambda at /src/libjxl/lib/jxl/dec_modular.cc:648:3)> /src/libjxl/lib/jxl/base/data_parallel.h:50:12
    #8 0x5dce82fe796d in RunOnPool<(lambda at /src/libjxl/lib/jxl/dec_modular.cc:648:3), (lambda at /src/libjxl/lib/jxl/dec_modular.cc:648:3)> /src/libjxl/lib/jxl/base/data_parallel.h:106:25
    #9 0x5dce82fe796d in jxl::ModularFrameDecoder::FinalizeDecoding(jxl::PassesDecoderState*, jxl::ThreadPool*, jxl::ImageBundle*, bool) /src/libjxl/lib/jxl/dec_modular.cc:648:3
    #10 0x5dce82eb0aae in jxl::FrameDecoder::Flush() /src/libjxl/lib/jxl/dec_frame.cc:889:3
    #11 0x5dce82ea7508 in jxl::FrameDecoder::FinalizeFrame() /src/libjxl/lib/jxl/dec_frame.cc:983:3
    #12 0x5dce82d507d6 in JxlDecoderProcessCodestream /src/libjxl/lib/jxl/decode.cc:1528:28
    #13 0x5dce82d507d6 in HandleBoxes(JxlDecoderStruct*) /src/libjxl/lib/jxl/decode.cc:1978:11
    #14 0x5dce82d486ff in JxlDecoderProcessInput /src/libjxl/lib/jxl/decode.cc:2143:29
    #15 0x5dce82d372ce in DecodeJpegXl /src/libjxl/tools/djxl_fuzzer.cc:178:31
    #16 0x5dce82d372ce in TestOneInput /src/libjxl/tools/djxl_fuzzer.cc:559:3
    #17 0x5dce82d372ce in LLVMFuzzerTestOneInput /src/libjxl/tools/djxl_fuzzer.cc:569:10
    #18 0x5dce82c2d6d2 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #19 0x5dce82c19282 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #20 0x5dce82c1eaec in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #21 0x5dce82c47482 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #22 0x7a6a8301f082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)
    #23 0x5dce82bf79cd in _start (/out/djxl_fuzzer+0xf69cd)

DEDUP_TOKEN: __asan_memcpy--jxl::(anonymous namespace)::WriteToImageBundleStage::ProcessRow(std::__1::vector<std::__1::vector<float*, std::__1::allocator<float*> >, std::__1::allocator<std::__1::vector<float*, std::__1::allocator<float*> > > > const&, std::__1::vector<std::__1::vector<float*, std::__1::allocator<float*> >, std::__1::allocator<std::__1::vector<float*, std::__1::allocator<float*> > > > const&, unsigned long, unsigned long, unsigned long, unsigned long, float*) const--jxl::LowMemoryRenderPipeline::RenderPadding(unsigned long, jxl::RectT<unsigned long>)
0x7a6a803ff780 is located 0 bytes to the right of 1081216-byte region [0x7a6a802f7800,0x7a6a803ff780)
allocated by thread T0 here:
    #0 0x5dce82cfcafd in __interceptor_malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:129:3
    #1 0x5dce82e63fc6 in jxl::CacheAligned::Allocate(unsigned long, unsigned long) /src/libjxl/lib/jxl/base/cache_aligned.cc:87:21
    #2 0x5dce82d98517 in Allocate /src/libjxl/lib/jxl/base/cache_aligned.h:43:12
    #3 0x5dce82d98517 in AllocateArray /src/libjxl/lib/jxl/base/cache_aligned.h:61:29
    #4 0x5dce82d98517 in jxl::PlaneBase::PlaneBase(unsigned long, unsigned long, unsigned long) /src/libjxl/lib/jxl/image.cc:93:14
    #5 0x5dce8310ecf7 in Plane /src/libjxl/lib/jxl/image.h:150:9
    #6 0x5dce8310ecf7 in Image3 /src/libjxl/lib/jxl/image.h:348:17
    #7 0x5dce8310ecf7 in jxl::(anonymous namespace)::WriteToImageBundleStage::SetInputSizes(std::__1::vector<std::__1::pair<unsigned long, unsigned long>, std::__1::allocator<std::__1::pair<unsigned long, unsigned long> > > const&) /src/libjxl/lib/jxl/render_pipeline/stage_write.cc:195:9
    #8 0x5dce830b50eb in jxl::LowMemoryRenderPipeline::Init() /src/libjxl/lib/jxl/render_pipeline/low_memory_render_pipeline.cc:303:17
    #9 0x5dce83057f3a in jxl::RenderPipeline::Builder::Finalize(jxl::FrameDimensions) && /src/libjxl/lib/jxl/render_pipeline/render_pipeline.cc:91:8
    #10 0x5dce830ae8d6 in jxl::PassesDecoderState::PreparePipeline(jxl::ImageBundle*, jxl::PassesDecoderState::PipelineOptions) /src/libjxl/lib/jxl/dec_cache.cc:196:40
    #11 0x5dce82ea5ae4 in jxl::FrameDecoder::ProcessSections(jxl::FrameDecoder::SectionInfo const*, unsigned long, jxl::FrameDecoder::SectionStatus*) /src/libjxl/lib/jxl/dec_frame.cc:745:5
    #12 0x5dce82d50528 in JxlDecoderProcessCodestream /src/libjxl/lib/jxl/decode.cc:1496:27
    #13 0x5dce82d50528 in HandleBoxes(JxlDecoderStruct*) /src/libjxl/lib/jxl/decode.cc:1978:11
    #14 0x5dce82d486ff in JxlDecoderProcessInput /src/libjxl/lib/jxl/decode.cc:2143:29
    #15 0x5dce82d372ce in DecodeJpegXl /src/libjxl/tools/djxl_fuzzer.cc:178:31
    #16 0x5dce82d372ce in TestOneInput /src/libjxl/tools/djxl_fuzzer.cc:559:3
    #17 0x5dce82d372ce in LLVMFuzzerTestOneInput /src/libjxl/tools/djxl_fuzzer.cc:569:10
    #18 0x5dce82c2d6d2 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #19 0x5dce82c19282 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #20 0x5dce82c1eaec in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #21 0x5dce82c47482 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #22 0x7a6a8301f082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)

DEDUP_TOKEN: __interceptor_malloc--jxl::CacheAligned::Allocate(unsigned long, unsigned long)--Allocate
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:22:3 in __asan_memcpy
Shadow bytes around the buggy address:
  0x0f4dd0077ea0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0f4dd0077eb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0f4dd0077ec0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0f4dd0077ed0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0f4dd0077ee0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0f4dd0077ef0:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0f4dd0077f00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0f4dd0077f10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0f4dd0077f20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0f4dd0077f30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0f4dd0077f40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING