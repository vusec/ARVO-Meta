======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/coder_MNG_fuzzer < INPUT_FILE
or
  /out/coder_MNG_fuzzer INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/coder_MNG_fuzzer [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
=================================================================
==7==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6020000000d9 at pc 0x000000736b0c bp 0x7ffc482fcc70 sp 0x7ffc482fcc68
READ of size 1 at 0x6020000000d9 thread T0
SCARINESS: 12 (1-byte-read-heap-buffer-overflow)
    #0 0x736b0b in mng_get_long /src/graphicsmagick/coders/png.c:1021:38
    #1 0x722b1a in ReadMNGImage /src/graphicsmagick/coders/png.c:4391:48
    #2 0x5c937b in ReadImage /src/graphicsmagick/magick/constitute.c:1607:13
    #3 0x5828f8 in BlobToImage /src/graphicsmagick/magick/blob.c:764:13
    #4 0x536d5e in Magick::Image::read(Magick::Blob const&) /src/graphicsmagick/Magick++/lib/Image.cpp:1591:5
    #5 0x52e603 in LLVMFuzzerTestOneInput /src/graphicsmagick/fuzzing/coder_fuzzer.cc:20:15
    #6 0x52ef3f in ExecuteFilesOnyByOne(int, char**) /src/libfuzzer/afl/afl_driver.cpp:301:5
    #7 0x52f4ee in main /src/libfuzzer/afl/afl_driver.cpp:339:12
    #8 0x701d0e94783f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #9 0x41ddc8 in _start (/out/coder_MNG_fuzzer+0x41ddc8)

DEDUP_TOKEN: mng_get_long--ReadMNGImage--ReadImage
0x6020000000d9 is located 0 bytes to the right of 9-byte region [0x6020000000d0,0x6020000000d9)
allocated by thread T0 here:
    #0 0x4ebc57 in malloc /src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:98
    #1 0x71ecbb in ReadMNGImage /src/graphicsmagick/coders/png.c:4222:21
    #2 0x5c937b in ReadImage /src/graphicsmagick/magick/constitute.c:1607:13
    #3 0x5828f8 in BlobToImage /src/graphicsmagick/magick/blob.c:764:13
    #4 0x536d5e in Magick::Image::read(Magick::Blob const&) /src/graphicsmagick/Magick++/lib/Image.cpp:1591:5
    #5 0x52e603 in LLVMFuzzerTestOneInput /src/graphicsmagick/fuzzing/coder_fuzzer.cc:20:15
    #6 0x52ef3f in ExecuteFilesOnyByOne(int, char**) /src/libfuzzer/afl/afl_driver.cpp:301:5
    #7 0x52f4ee in main /src/libfuzzer/afl/afl_driver.cpp:339:12
    #8 0x701d0e94783f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: malloc--ReadMNGImage--ReadImage
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/graphicsmagick/coders/png.c:1021:38 in mng_get_long
Shadow bytes around the buggy address:
  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff8000: fa fa fd fa fa fa fd fa fa fa 00 00 fa fa 00 00
=>0x0c047fff8010: fa fa fd fd fa fa 00 00 fa fa 00[01]fa fa fa fa
  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==7==ABORTING
