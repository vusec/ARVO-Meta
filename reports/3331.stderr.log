INFO: Seed: 1829911876
INFO: Loaded 1 modules   (6960 guards): 6960 [0x98c040, 0x992d00), 
/out/opj_decompress_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==7==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x613000001848 at pc 0x0000005fd775 bp 0x7ffd53cd35b0 sp 0x7ffd53cd35a8
READ of size 4 at 0x613000001848 thread T0
SCARINESS: 27 (4-byte-read-heap-buffer-overflow-far-from-bounds)
    #0 0x5fd774 in opj_tcd_mct_decode /src/openjpeg/src/lib/openjp2/tcd.c:1988:45
    #1 0x5faeea in opj_tcd_decode_tile /src/openjpeg/src/lib/openjp2/tcd.c:1630:8
    #2 0x5a5954 in opj_j2k_decode_tile /src/openjpeg/src/lib/openjp2/j2k.c:8912:11
    #3 0x5c1658 in opj_j2k_decode_tiles /src/openjpeg/src/lib/openjp2/j2k.c:10632:15
    #4 0x5a047c in opj_j2k_exec /src/openjpeg/src/lib/openjp2/j2k.c:8078:33
    #5 0x5ab72f in opj_j2k_decode /src/openjpeg/src/lib/openjp2/j2k.c:10869:11
    #6 0x518a6c in LLVMFuzzerTestOneInput /src/openjpeg/./tests/fuzzers/opj_decompress_fuzzer.cpp:197:13
    #7 0x539f6e in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/libfuzzer/FuzzerLoop.cpp:463:13
    #8 0x5199a5 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/libfuzzer/FuzzerDriver.cpp:273:6
    #9 0x524c3f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/libfuzzer/FuzzerDriver.cpp:689:9
    #10 0x519048 in main /src/libfuzzer/FuzzerMain.cpp:20:10
    #11 0x7f89634de83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #12 0x41c298 in _start (/out/opj_decompress_fuzzer+0x41c298)

DEDUP_TOKEN: opj_tcd_mct_decode--opj_tcd_decode_tile--opj_j2k_decode_tile
Address 0x613000001848 is a wild pointer.
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/openjpeg/src/lib/openjp2/tcd.c:1988:45 in opj_tcd_mct_decode
Shadow bytes around the buggy address:
  0x0c267fff82b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c267fff82c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c267fff82d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c267fff82e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c267fff82f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
=>0x0c267fff8300: fa fa fa fa fa fa fa fa fa[fa]fa fa fa fa fa fa
  0x0c267fff8310: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c267fff8320: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c267fff8330: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c267fff8340: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c267fff8350: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==7==ABORTING
