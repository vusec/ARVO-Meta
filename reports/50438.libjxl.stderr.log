INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 3292017920
INFO: Loaded 1 modules   (27141 inline 8-bit counters): 27141 [0x5bee048dcd98, 0x5bee048e379d),
INFO: Loaded 1 PC tables (27141 PCs): 27141 [0x5bee048e37a0,0x5bee0494d7f0),
/out/djxl_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x7ea7362d2600 at pc 0x5bee046afdab bp 0x7ffce3f28cf0 sp 0x7ffce3f28ce8
READ of size 4 at 0x7ea7362d2600 thread T0
SCARINESS: 17 (4-byte-read-heap-buffer-overflow)
    #0 0x5bee046afdaa in jxl::PerformBlending(float const* const*, float const* const*, float* const*, unsigned long, unsigned long, jxl::PatchBlending const&, jxl::PatchBlending const*, std::__1::vector<jxl::ExtraChannelInfo, std::__1::allocator<jxl::ExtraChannelInfo> > const&) /src/libjxl/lib/jxl/blending.cc:51:29
    #1 0x5bee046ee1cc in jxl::N_SSE4::BlendingStage::ProcessRow(std::__1::vector<std::__1::vector<float*, std::__1::allocator<float*> >, std::__1::allocator<std::__1::vector<float*, std::__1::allocator<float*> > > > const&, std::__1::vector<std::__1::vector<float*, std::__1::allocator<float*> >, std::__1::allocator<std::__1::vector<float*, std::__1::allocator<float*> > > > const&, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long) const /src/libjxl/lib/jxl/render_pipeline/stage_blending.cc:150:5
    #2 0x5bee046e0609 in jxl::LowMemoryRenderPipeline::RenderRect(unsigned long, std::__1::vector<jxl::Plane<float>, std::__1::allocator<jxl::Plane<float> > >&, jxl::RectT<unsigned long>, jxl::RectT<unsigned long>) /src/libjxl/lib/jxl/render_pipeline/low_memory_render_pipeline.cc:739:19
    #3 0x5bee046e2e77 in jxl::LowMemoryRenderPipeline::ProcessBuffers(unsigned long, unsigned long) /src/libjxl/lib/jxl/render_pipeline/low_memory_render_pipeline.cc:845:5
    #4 0x5bee04602610 in operator() /src/libjxl/lib/jxl/dec_modular.cc:652:3
    #5 0x5bee04602610 in jxl::ThreadPool::RunCallState<jxl::ModularFrameDecoder::FinalizeDecoding(jxl::PassesDecoderState*, jxl::ThreadPool*, jxl::ImageBundle*, bool)::$_4, jxl::ModularFrameDecoder::FinalizeDecoding(jxl::PassesDecoderState*, jxl::ThreadPool*, jxl::ImageBundle*, bool)::$_5>::CallDataFunc(void*, unsigned int, unsigned long) /src/libjxl/lib/jxl/base/data_parallel.h:81:14
    #6 0x5bee04470491 in jxl::ThreadPool::SequentialRunnerStatic(void*, void*, int (*)(void*, unsigned long), void (*)(void*, unsigned int, unsigned long), unsigned int, unsigned int) /src/libjxl/lib/jxl/base/data_parallel.cc:18:5
    #7 0x5bee045fd6f3 in Run<(lambda at /src/libjxl/lib/jxl/dec_modular.cc:652:3), (lambda at /src/libjxl/lib/jxl/dec_modular.cc:652:3)> /src/libjxl/lib/jxl/base/data_parallel.h:50:12
    #8 0x5bee045fd6f3 in RunOnPool<(lambda at /src/libjxl/lib/jxl/dec_modular.cc:652:3), (lambda at /src/libjxl/lib/jxl/dec_modular.cc:652:3)> /src/libjxl/lib/jxl/base/data_parallel.h:106:25
    #9 0x5bee045fd6f3 in jxl::ModularFrameDecoder::FinalizeDecoding(jxl::PassesDecoderState*, jxl::ThreadPool*, jxl::ImageBundle*, bool) /src/libjxl/lib/jxl/dec_modular.cc:652:3
    #10 0x5bee044b7390 in jxl::FrameDecoder::Flush() /src/libjxl/lib/jxl/dec_frame.cc:882:3
    #11 0x5bee044ade6d in jxl::FrameDecoder::FinalizeFrame() /src/libjxl/lib/jxl/dec_frame.cc:967:3
    #12 0x5bee0435cdaf in JxlDecoderProcessCodestream /src/libjxl/lib/jxl/decode.cc:1514:28
    #13 0x5bee0435cdaf in HandleBoxes(JxlDecoderStruct*) /src/libjxl/lib/jxl/decode.cc:1973:33
    #14 0x5bee043544af in JxlDecoderProcessInput /src/libjxl/lib/jxl/decode.cc:2119:29
    #15 0x5bee0434285e in DecodeJpegXl /src/libjxl/tools/djxl_fuzzer.cc:178:31
    #16 0x5bee0434285e in TestOneInput /src/libjxl/tools/djxl_fuzzer.cc:559:3
    #17 0x5bee0434285e in LLVMFuzzerTestOneInput /src/libjxl/tools/djxl_fuzzer.cc:569:10
    #18 0x5bee04239513 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #19 0x5bee042251a2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #20 0x5bee0422a9ec in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #21 0x5bee042535e2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #22 0x7ea737a03082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)
    #23 0x5bee042039cd in _start (/out/djxl_fuzzer+0x1039cd)

DEDUP_TOKEN: jxl::PerformBlending(float const* const*, float const* const*, float* const*, unsigned long, unsigned long, jxl::PatchBlending const&, jxl::PatchBlending const*, std::__1::vector<jxl::ExtraChannelInfo, std::__1::allocator<jxl::ExtraChannelInfo> > const&)--jxl::N_SSE4::BlendingStage::ProcessRow(std::__1::vector<std::__1::vector<float*, std::__1::allocator<float*> >, std::__1::allocator<std::__1::vector<float*, std::__1::allocator<float*> > > > const&, std::__1::vector<std::__1::vector<float*, std::__1::allocator<float*> >, std::__1::allocator<std::__1::vector<float*, std::__1::allocator<float*> > > > const&, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long) const--jxl::LowMemoryRenderPipeline::RenderRect(unsigned long, std::__1::vector<jxl::Plane<float>, std::__1::allocator<jxl::Plane<float> > >&, jxl::RectT<unsigned long>, jxl::RectT<unsigned long>)
0x7ea7362d2600 is located 0 bytes to the right of 167424-byte region [0x7ea7362a9800,0x7ea7362d2600)
allocated by thread T0 here:
    #0 0x5bee04307dfd in __interceptor_malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:129:3
    #1 0x5bee04470006 in jxl::CacheAligned::Allocate(unsigned long, unsigned long) /src/libjxl/lib/jxl/base/cache_aligned.cc:87:21
    #2 0x5bee043a6c77 in Allocate /src/libjxl/lib/jxl/base/cache_aligned.h:43:12
    #3 0x5bee043a6c77 in AllocateArray /src/libjxl/lib/jxl/base/cache_aligned.h:61:29
    #4 0x5bee043a6c77 in jxl::PlaneBase::PlaneBase(unsigned long, unsigned long, unsigned long) /src/libjxl/lib/jxl/image.cc:93:14
    #5 0x5bee04771b44 in Plane /src/libjxl/lib/jxl/image.h:150:9
    #6 0x5bee04771b44 in construct<jxl::Plane<float>, const unsigned long &, const unsigned long &> /usr/local/bin/../include/c++/v1/__memory/allocator.h:151:28
    #7 0x5bee04771b44 in construct<jxl::Plane<float>, const unsigned long &, const unsigned long &, void> /usr/local/bin/../include/c++/v1/__memory/allocator_traits.h:290:13
    #8 0x5bee04771b44 in void std::__1::vector<jxl::Plane<float>, std::__1::allocator<jxl::Plane<float> > >::__emplace_back_slow_path<unsigned long const&, unsigned long const&>(unsigned long const&, unsigned long const&) /usr/local/bin/../include/c++/v1/vector:1676:5
    #9 0x5bee04771559 in emplace_back<const unsigned long &, const unsigned long &> /usr/local/bin/../include/c++/v1/vector:1696:9
    #10 0x5bee04771559 in jxl::(anonymous namespace)::WriteToImageBundleStage::SetInputSizes(std::__1::vector<std::__1::pair<unsigned long, unsigned long>, std::__1::allocator<std::__1::pair<unsigned long, unsigned long> > > const&) /src/libjxl/lib/jxl/render_pipeline/stage_write.cc:200:39
    #11 0x5bee046d7b7f in jxl::LowMemoryRenderPipeline::Init() /src/libjxl/lib/jxl/render_pipeline/low_memory_render_pipeline.cc:285:17
    #12 0x5bee0466e1fa in jxl::RenderPipeline::Builder::Finalize(jxl::FrameDimensions) && /src/libjxl/lib/jxl/render_pipeline/render_pipeline.cc:91:8
    #13 0x5bee046d1e1f in jxl::PassesDecoderState::PreparePipeline(jxl::ImageBundle*, jxl::PassesDecoderState::PipelineOptions) /src/libjxl/lib/jxl/dec_cache.cc:231:40
    #14 0x5bee044ab913 in jxl::FrameDecoder::ProcessSections(jxl::FrameDecoder::SectionInfo const*, unsigned long, jxl::FrameDecoder::SectionStatus*) /src/libjxl/lib/jxl/dec_frame.cc:752:5
    #15 0x5bee0435bf90 in JxlDecoderProcessSections /src/libjxl/lib/jxl/decode.cc:1143:40
    #16 0x5bee0435bf90 in JxlDecoderProcessCodestream /src/libjxl/lib/jxl/decode.cc:1472:7
    #17 0x5bee0435bf90 in HandleBoxes(JxlDecoderStruct*) /src/libjxl/lib/jxl/decode.cc:1973:33
    #18 0x5bee043544af in JxlDecoderProcessInput /src/libjxl/lib/jxl/decode.cc:2119:29
    #19 0x5bee0434285e in DecodeJpegXl /src/libjxl/tools/djxl_fuzzer.cc:178:31
    #20 0x5bee0434285e in TestOneInput /src/libjxl/tools/djxl_fuzzer.cc:559:3
    #21 0x5bee0434285e in LLVMFuzzerTestOneInput /src/libjxl/tools/djxl_fuzzer.cc:569:10
    #22 0x5bee04239513 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #23 0x5bee042251a2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #24 0x5bee0422a9ec in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #25 0x5bee042535e2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #26 0x7ea737a03082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)

DEDUP_TOKEN: __interceptor_malloc--jxl::CacheAligned::Allocate(unsigned long, unsigned long)--Allocate
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libjxl/lib/jxl/blending.cc:51:29 in jxl::PerformBlending(float const* const*, float const* const*, float* const*, unsigned long, unsigned long, jxl::PatchBlending const&, jxl::PatchBlending const*, std::__1::vector<jxl::ExtraChannelInfo, std::__1::allocator<jxl::ExtraChannelInfo> > const&)
Shadow bytes around the buggy address:
  0x0fd566c52470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0fd566c52480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0fd566c52490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0fd566c524a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0fd566c524b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0fd566c524c0:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0fd566c524d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0fd566c524e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0fd566c524f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0fd566c52500: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0fd566c52510: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING