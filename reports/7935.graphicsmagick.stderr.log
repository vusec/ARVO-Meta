======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/coder_DPX_fuzzer < INPUT_FILE
or
  /out/coder_DPX_fuzzer INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/coder_DPX_fuzzer [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60200000019f at pc 0x00000074c179 bp 0x7ffe614a7bb0 sp 0x7ffe614a7ba8
WRITE of size 1 at 0x60200000019f thread T0
SCARINESS: 31 (1-byte-write-heap-buffer-overflow)
    #0 0x74c178 in ReadDPXImage /src/graphicsmagick/coders/dpx.c:2901:25
    #1 0x5bbc0b in ReadImage /src/graphicsmagick/magick/constitute.c:1607:13
    #2 0x577558 in BlobToImage /src/graphicsmagick/magick/blob.c:764:13
    #3 0x530d2e in Magick::Image::read(Magick::Blob const&) /src/graphicsmagick/Magick++/lib/Image.cpp:1591:5
    #4 0x5285c3 in LLVMFuzzerTestOneInput /src/graphicsmagick/fuzzing/coder_fuzzer.cc:20:15
    #5 0x528ecf in ExecuteFilesOnyByOne(int, char**) /src/libfuzzer/afl/afl_driver.cpp:290:5
    #6 0x52946f in main /src/libfuzzer/afl/afl_driver.cpp:327:12
    #7 0x73d9d978883f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #8 0x41d638 in _start (/out/coder_DPX_fuzzer+0x41d638)

DEDUP_TOKEN: ReadDPXImage--ReadImage--BlobToImage
0x60200000019f is located 0 bytes to the right of 15-byte region [0x602000000190,0x60200000019f)
allocated by thread T0 here:
    #0 0x4e9fb8 in malloc /src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:88
    #1 0x68abcf in OpenCache /src/graphicsmagick/magick/pixel_cache.c:3345:7
    #2 0x68a1b5 in ModifyCache /src/graphicsmagick/magick/pixel_cache.c:3145:18
    #3 0x68da65 in SetCacheNexus /src/graphicsmagick/magick/pixel_cache.c:4089:7
    #4 0x6883d5 in GetCacheNexus /src/graphicsmagick/magick/pixel_cache.c:2246:10
    #5 0x6882ed in GetCacheViewPixels /src/graphicsmagick/magick/pixel_cache.c:2364:10
    #6 0x747a7c in ReadDPXImage /src/graphicsmagick/coders/dpx.c:2695:28
    #7 0x5bbc0b in ReadImage /src/graphicsmagick/magick/constitute.c:1607:13
    #8 0x577558 in BlobToImage /src/graphicsmagick/magick/blob.c:764:13
    #9 0x530d2e in Magick::Image::read(Magick::Blob const&) /src/graphicsmagick/Magick++/lib/Image.cpp:1591:5
    #10 0x5285c3 in LLVMFuzzerTestOneInput /src/graphicsmagick/fuzzing/coder_fuzzer.cc:20:15
    #11 0x528ecf in ExecuteFilesOnyByOne(int, char**) /src/libfuzzer/afl/afl_driver.cpp:290:5
    #12 0x52946f in main /src/libfuzzer/afl/afl_driver.cpp:327:12
    #13 0x73d9d978883f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: malloc--OpenCache--ModifyCache
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/graphicsmagick/coders/dpx.c:2901:25 in ReadDPXImage
Shadow bytes around the buggy address:
  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff8000: fa fa fd fa fa fa fd fa fa fa 00 00 fa fa 00 00
  0x0c047fff8010: fa fa 00 00 fa fa 00 01 fa fa 00 02 fa fa 02 fa
  0x0c047fff8020: fa fa 02 fa fa fa 02 fa fa fa 00 fa fa fa 00 fa
=>0x0c047fff8030: fa fa 00[07]fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING