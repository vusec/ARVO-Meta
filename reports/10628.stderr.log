======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/mode_padding < INPUT_FILE
or
  /out/mode_padding INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/mode_padding [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
=================================================================
==7==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60200000000f at pc 0x0000005307db bp 0x7ffcf5ee8ca0 sp 0x7ffcf5ee8c98
READ of size 1 at 0x60200000000f thread T0
SCARINESS: 12 (1-byte-read-heap-buffer-overflow)
    #0 0x5307da in ref_oneandzero_unpad(unsigned char const*, unsigned long) /src/botan/./src/fuzzer/mode_padding.cpp:63:10
    #1 0x52ff08 in fuzz(unsigned char const*, unsigned long) /src/botan/./src/fuzzer/mode_padding.cpp:139:34
    #2 0x52fd74 in LLVMFuzzerTestOneInput /src/botan/./src/fuzzer/fuzzers.h:39:7
    #3 0x55bb11 in ExecuteFilesOnyByOne(int, char**) /src/libfuzzer/afl/afl_driver.cpp:301:5
    #4 0x55c0be in main /src/libfuzzer/afl/afl_driver.cpp:339:12
    #5 0x77a26f40083f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #6 0x41cab8 in _start (/out/mode_padding+0x41cab8)

DEDUP_TOKEN: ref_oneandzero_unpad(unsigned char const*, unsigned long)--fuzz(unsigned char const*, unsigned long)--LLVMFuzzerTestOneInput
0x60200000000f is located 1 bytes to the left of 3-byte region [0x602000000010,0x602000000013)
allocated by thread T0 here:
    #0 0x52b838 in operator new(unsigned long) /src/llvm/projects/compiler-rt/lib/asan/asan_new_delete.cc:106
    #1 0x55ba18 in __libcpp_allocate /usr/local/bin/../include/c++/v1/new:253:10
    #2 0x55ba18 in allocate /usr/local/bin/../include/c++/v1/memory:1800
    #3 0x55ba18 in allocate /usr/local/bin/../include/c++/v1/memory:1549
    #4 0x55ba18 in __vallocate /usr/local/bin/../include/c++/v1/vector:972
    #5 0x55ba18 in vector /usr/local/bin/../include/c++/v1/vector:1115
    #6 0x55ba18 in ExecuteFilesOnyByOne(int, char**) /src/libfuzzer/afl/afl_driver.cpp:298
    #7 0x55c0be in main /src/libfuzzer/afl/afl_driver.cpp:339:12
    #8 0x77a26f40083f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: operator new(unsigned long)--__libcpp_allocate--allocate
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/botan/./src/fuzzer/mode_padding.cpp:63:10 in ref_oneandzero_unpad(unsigned char const*, unsigned long)
Shadow bytes around the buggy address:
  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c047fff8000: fa[fa]03 fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==7==ABORTING
